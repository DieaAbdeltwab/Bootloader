
Bootloader_F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002444  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800262c  0800262c  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  0800262c  0800262c  0001262c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002634  08002634  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800263c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002004c  2**0
                  CONTENTS
 10 .bss          00000088  2000004c  2000004c  0002004c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000d4  200000d4  0002004c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000498a  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f1f  00000000  00000000  00024a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e0  00000000  00000000  00025928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000428  00000000  00000000  00025e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002eb8  00000000  00000000  00026230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000051c2  00000000  00000000  000290e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c784  00000000  00000000  0002e2aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003aa2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000126c  00000000  00000000  0003aa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000004c 	.word	0x2000004c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080025d8 	.word	0x080025d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000050 	.word	0x20000050
 80001e8:	080025d8 	.word	0x080025d8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <BOOTLOADER_voidHandleGetVerCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleGetVerCmd(uint8_t * Copy_pu8CmdPacket )
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	75fb      	strb	r3, [r7, #23]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 8000500:	7dfb      	ldrb	r3, [r7, #23]
 8000502:	3b04      	subs	r3, #4
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4413      	add	r3, r2
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	613b      	str	r3, [r7, #16]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 800050c:	7dfb      	ldrb	r3, [r7, #23]
 800050e:	3b04      	subs	r3, #4
 8000510:	b2db      	uxtb	r3, r3
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 fa85 	bl	8000a26 <u8VerifyCRC>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10c      	bne.n	8000540 <BOOTLOADER_voidHandleGetVerCmd+0x50>
	{
		uint8_t Local_u8BlVersion ;
		voidSendAck(1u);
 8000526:	2001      	movs	r0, #1
 8000528:	f000 fa69 	bl	80009fe <voidSendAck>
		Local_u8BlVersion = BOOTLOADER_VERSION ;
 800052c:	2301      	movs	r3, #1
 800052e:	73bb      	strb	r3, [r7, #14]
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8BlVersion , 1 );
 8000530:	f107 030e 	add.w	r3, r7, #14
 8000534:	2201      	movs	r2, #1
 8000536:	4619      	mov	r1, r3
 8000538:	2000      	movs	r0, #0
 800053a:	f001 fef1 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 800053e:	e001      	b.n	8000544 <BOOTLOADER_voidHandleGetVerCmd+0x54>
		voidSendNAck();
 8000540:	f000 fa4e 	bl	80009e0 <voidSendNAck>
}
 8000544:	bf00      	nop
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <BOOTLOADER_voidHandleGetHelpCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleGetHelpCmd(uint8_t * Copy_pu8CmdPacket )
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	77fb      	strb	r3, [r7, #31]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 800055c:	7ffb      	ldrb	r3, [r7, #31]
 800055e:	3b04      	subs	r3, #4
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	61bb      	str	r3, [r7, #24]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 8000568:	7ffb      	ldrb	r3, [r7, #31]
 800056a:	3b04      	subs	r3, #4
 800056c:	b2db      	uxtb	r3, r3
 800056e:	69ba      	ldr	r2, [r7, #24]
 8000570:	4619      	mov	r1, r3
 8000572:	6878      	ldr	r0, [r7, #4]
 8000574:	f000 fa57 	bl	8000a26 <u8VerifyCRC>
 8000578:	4603      	mov	r3, r0
 800057a:	75fb      	strb	r3, [r7, #23]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 800057c:	7dfb      	ldrb	r3, [r7, #23]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d110      	bne.n	80005a4 <BOOTLOADER_voidHandleGetHelpCmd+0x58>
	{
		uint8_t Local_pu8BootloaderCommands[] =
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <BOOTLOADER_voidHandleGetHelpCmd+0x64>)
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	ca07      	ldmia	r2, {r0, r1, r2}
 800058a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				BOOTLOADER_MEM_READ                ,
				BOOTLOADER_READ_SECTOR_P_STATUS    ,
				BOOTLOADER_OTP_READ                ,
				BOOTLOADER_DIS_R_W_PROTECT
		};
		voidSendAck(sizeof(Local_pu8BootloaderCommands));
 800058e:	200c      	movs	r0, #12
 8000590:	f000 fa35 	bl	80009fe <voidSendAck>
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , Local_pu8BootloaderCommands , sizeof(Local_pu8BootloaderCommands) );
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	220c      	movs	r2, #12
 800059a:	4619      	mov	r1, r3
 800059c:	2000      	movs	r0, #0
 800059e:	f001 febf 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 80005a2:	e001      	b.n	80005a8 <BOOTLOADER_voidHandleGetHelpCmd+0x5c>
		voidSendNAck();
 80005a4:	f000 fa1c 	bl	80009e0 <voidSendNAck>
}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	080025f0 	.word	0x080025f0

080005b4 <BOOTLOADER_voidHandleGetCIDCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleGetCIDCmd(uint8_t * Copy_pu8CmdPacket )
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	75fb      	strb	r3, [r7, #23]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 80005c4:	7dfb      	ldrb	r3, [r7, #23]
 80005c6:	3b04      	subs	r3, #4
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	613b      	str	r3, [r7, #16]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 80005d0:	7dfb      	ldrb	r3, [r7, #23]
 80005d2:	3b04      	subs	r3, #4
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 fa23 	bl	8000a26 <u8VerifyCRC>
 80005e0:	4603      	mov	r3, r0
 80005e2:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d111      	bne.n	800060e <BOOTLOADER_voidHandleGetCIDCmd+0x5a>
	{
		uint16_t Local_u16DeviceID ;
		voidSendAck(2u);
 80005ea:	2002      	movs	r0, #2
 80005ec:	f000 fa07 	bl	80009fe <voidSendAck>
		Local_u16DeviceID = (DBGMCU->IDCODE & 0x0FFF) ;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <BOOTLOADER_voidHandleGetCIDCmd+0x68>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	81bb      	strh	r3, [r7, #12]
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , (uint8_t *)&Local_u16DeviceID , 2 );
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2202      	movs	r2, #2
 8000604:	4619      	mov	r1, r3
 8000606:	2000      	movs	r0, #0
 8000608:	f001 fe8a 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 800060c:	e001      	b.n	8000612 <BOOTLOADER_voidHandleGetCIDCmd+0x5e>
		voidSendNAck();
 800060e:	f000 f9e7 	bl	80009e0 <voidSendNAck>
}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	e0042000 	.word	0xe0042000

08000620 <BOOTLOADER_voidHandleGetRDPStatusCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleGetRDPStatusCmd(uint8_t * Copy_pu8CmdPacket )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3301      	adds	r3, #1
 800062e:	75fb      	strb	r3, [r7, #23]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	3b04      	subs	r3, #4
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4413      	add	r3, r2
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	613b      	str	r3, [r7, #16]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	3b04      	subs	r3, #4
 8000640:	b2db      	uxtb	r3, r3
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f9ed 	bl	8000a26 <u8VerifyCRC>
 800064c:	4603      	mov	r3, r0
 800064e:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10f      	bne.n	8000676 <BOOTLOADER_voidHandleGetRDPStatusCmd+0x56>
	{
		uint8_t Local_u8RDPStatus ;
		voidSendAck(1u);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 f9d1 	bl	80009fe <voidSendAck>
		Local_u8RDPStatus = (uint8_t)(( RDP_USER_OPTION_WORD_REG >> 8) & 0xff );
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <BOOTLOADER_voidHandleGetRDPStatusCmd+0x64>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73bb      	strb	r3, [r7, #14]
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8RDPStatus , 1 );
 8000666:	f107 030e 	add.w	r3, r7, #14
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	2000      	movs	r0, #0
 8000670:	f001 fe56 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 8000674:	e001      	b.n	800067a <BOOTLOADER_voidHandleGetRDPStatusCmd+0x5a>
		voidSendNAck();
 8000676:	f000 f9b3 	bl	80009e0 <voidSendNAck>
}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	1fffc000 	.word	0x1fffc000

08000688 <BOOTLOADER_voidHandleGotoAddressCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleGotoAddressCmd(uint8_t * Copy_pu8CmdPacket )
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	77fb      	strb	r3, [r7, #31]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 8000698:	7ffb      	ldrb	r3, [r7, #31]
 800069a:	3b04      	subs	r3, #4
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	61bb      	str	r3, [r7, #24]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 80006a4:	7ffb      	ldrb	r3, [r7, #31]
 80006a6:	3b04      	subs	r3, #4
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f9b9 	bl	8000a26 <u8VerifyCRC>
 80006b4:	4603      	mov	r3, r0
 80006b6:	75fb      	strb	r3, [r7, #23]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 80006b8:	7dfb      	ldrb	r3, [r7, #23]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d11e      	bne.n	80006fc <BOOTLOADER_voidHandleGotoAddressCmd+0x74>
	{
		uint32_t Local_u32Addess ;
		uint8_t  Local_u8AddressStatus ;
		voidSendAck(1u);
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 f99d 	bl	80009fe <voidSendAck>
		Local_u32Addess = *((uint32_t *) &Copy_pu8CmdPacket[2] );
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006ca:	613b      	str	r3, [r7, #16]
		Local_u8AddressStatus = u8ValidateAddress(Local_u32Addess);
 80006cc:	6938      	ldr	r0, [r7, #16]
 80006ce:	f000 f9d7 	bl	8000a80 <u8ValidateAddress>
 80006d2:	4603      	mov	r3, r0
 80006d4:	72fb      	strb	r3, [r7, #11]
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8AddressStatus , 1 );
 80006d6:	f107 030b 	add.w	r3, r7, #11
 80006da:	2201      	movs	r2, #1
 80006dc:	4619      	mov	r1, r3
 80006de:	2000      	movs	r0, #0
 80006e0:	f001 fe1e 	bl	8002320 <MUSART_u8TransmitArraySynch>
		if ( Local_u8AddressStatus == VALID_ADDRESS )
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10a      	bne.n	8000700 <BOOTLOADER_voidHandleGotoAddressCmd+0x78>
		{
			void (* Local_pFuncPtr )(void);
			Local_u32Addess |= 1 ;
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
			Local_pFuncPtr   = (void *)Local_u32Addess ;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	60fb      	str	r3, [r7, #12]
			Local_pFuncPtr   ();
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4798      	blx	r3
	}
	else
	{
		voidSendNAck();
	}
}
 80006fa:	e001      	b.n	8000700 <BOOTLOADER_voidHandleGotoAddressCmd+0x78>
		voidSendNAck();
 80006fc:	f000 f970 	bl	80009e0 <voidSendNAck>
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <BOOTLOADER_voidHandleFlashEraseCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleFlashEraseCmd(uint8_t * Copy_pu8CmdPacket )
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	75fb      	strb	r3, [r7, #23]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	3b04      	subs	r3, #4
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	613b      	str	r3, [r7, #16]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	3b04      	subs	r3, #4
 8000728:	b2db      	uxtb	r3, r3
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4619      	mov	r1, r3
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f979 	bl	8000a26 <u8VerifyCRC>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d116      	bne.n	800076c <BOOTLOADER_voidHandleFlashEraseCmd+0x64>
	{
		uint8_t Local_u8EraseStatus ;
		voidSendAck(1u);
 800073e:	2001      	movs	r0, #1
 8000740:	f000 f95d 	bl	80009fe <voidSendAck>
		Local_u8EraseStatus = u8ExecuteFlashErase( Copy_pu8CmdPacket[2] , Copy_pu8CmdPacket[3] );
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3302      	adds	r3, #2
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3303      	adds	r3, #3
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	4610      	mov	r0, r2
 8000754:	f000 fa0a 	bl	8000b6c <u8ExecuteFlashErase>
 8000758:	4603      	mov	r3, r0
 800075a:	73bb      	strb	r3, [r7, #14]
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8EraseStatus , 1 );
 800075c:	f107 030e 	add.w	r3, r7, #14
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	2000      	movs	r0, #0
 8000766:	f001 fddb 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 800076a:	e001      	b.n	8000770 <BOOTLOADER_voidHandleFlashEraseCmd+0x68>
		voidSendNAck();
 800076c:	f000 f938 	bl	80009e0 <voidSendNAck>
}
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <BOOTLOADER_voidHandleMemWriteCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleMemWriteCmd(uint8_t * Copy_pu8CmdPacket )
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	77fb      	strb	r3, [r7, #31]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 8000788:	7ffb      	ldrb	r3, [r7, #31]
 800078a:	3b04      	subs	r3, #4
 800078c:	687a      	ldr	r2, [r7, #4]
 800078e:	4413      	add	r3, r2
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	61bb      	str	r3, [r7, #24]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 8000794:	7ffb      	ldrb	r3, [r7, #31]
 8000796:	3b04      	subs	r3, #4
 8000798:	b2db      	uxtb	r3, r3
 800079a:	69ba      	ldr	r2, [r7, #24]
 800079c:	4619      	mov	r1, r3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 f941 	bl	8000a26 <u8VerifyCRC>
 80007a4:	4603      	mov	r3, r0
 80007a6:	75fb      	strb	r3, [r7, #23]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d125      	bne.n	80007fa <BOOTLOADER_voidHandleMemWriteCmd+0x82>
	{
		uint8_t  Local_u8WritingStatus ;
		uint32_t Local_u32Address = *((uint32_t *)&Copy_pu8CmdPacket[2]);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007b4:	613b      	str	r3, [r7, #16]
		uint8_t  Local_u8AddressStatus = u8ValidateAddress(Local_u32Address);
 80007b6:	6938      	ldr	r0, [r7, #16]
 80007b8:	f000 f962 	bl	8000a80 <u8ValidateAddress>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
		voidSendAck(1u);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 f91c 	bl	80009fe <voidSendAck>
		if ( Local_u8AddressStatus == VALID_ADDRESS )
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10c      	bne.n	80007e6 <BOOTLOADER_voidHandleMemWriteCmd+0x6e>
		{
			uint8_t Local_u8PayloadLength = Copy_pu8CmdPacket[6];
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	799b      	ldrb	r3, [r3, #6]
 80007d0:	73bb      	strb	r3, [r7, #14]
			Local_u8WritingStatus = u8ExecuteMemoryWrite(&Copy_pu8CmdPacket[7], Local_u32Address , Local_u8PayloadLength) ;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3307      	adds	r3, #7
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	6939      	ldr	r1, [r7, #16]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f978 	bl	8000ad0 <u8ExecuteMemoryWrite>
 80007e0:	4603      	mov	r3, r0
 80007e2:	737b      	strb	r3, [r7, #13]
 80007e4:	e001      	b.n	80007ea <BOOTLOADER_voidHandleMemWriteCmd+0x72>
		}
		else
		{
			Local_u8WritingStatus = WRITING_ERROR ;
 80007e6:	2301      	movs	r3, #1
 80007e8:	737b      	strb	r3, [r7, #13]
		}
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8WritingStatus , 1 );
 80007ea:	f107 030d 	add.w	r3, r7, #13
 80007ee:	2201      	movs	r2, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 fd94 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 80007f8:	e001      	b.n	80007fe <BOOTLOADER_voidHandleMemWriteCmd+0x86>
		voidSendNAck();
 80007fa:	f000 f8f1 	bl	80009e0 <voidSendNAck>
}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <BOOTLOADER_voidHandleEnableRWProtectCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleEnableRWProtectCmd(uint8_t * Copy_pu8CmdPacket )
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC  ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	75fb      	strb	r3, [r7, #23]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 8000816:	7dfb      	ldrb	r3, [r7, #23]
 8000818:	3b04      	subs	r3, #4
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	613b      	str	r3, [r7, #16]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	3b04      	subs	r3, #4
 8000826:	b2db      	uxtb	r3, r3
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	4619      	mov	r1, r3
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f8fa 	bl	8000a26 <u8VerifyCRC>
 8000832:	4603      	mov	r3, r0
 8000834:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d118      	bne.n	800086e <BOOTLOADER_voidHandleEnableRWProtectCmd+0x68>
	{
		uint8_t Local_u8ErrorStatus ;
		uint8_t Local_u8SectorDetails = Copy_pu8CmdPacket[2];
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	73bb      	strb	r3, [r7, #14]
		voidSendAck(1u);
 8000842:	2001      	movs	r0, #1
 8000844:	f000 f8db 	bl	80009fe <voidSendAck>
		MFLASH_voidOptionBytesUnlock();
 8000848:	f000 fcba 	bl	80011c0 <MFLASH_voidOptionBytesUnlock>
		Local_u8ErrorStatus = MFLASH_u8MaskAllSectorsWriteProtection(Local_u8SectorDetails , FLASH_BANK_1 );
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fc19 	bl	8001088 <MFLASH_u8MaskAllSectorsWriteProtection>
 8000856:	4603      	mov	r3, r0
 8000858:	737b      	strb	r3, [r7, #13]
		MFLASH_voidOptionBytesLock();
 800085a:	f000 fcc5 	bl	80011e8 <MFLASH_voidOptionBytesLock>
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8ErrorStatus , 1 );
 800085e:	f107 030d 	add.w	r3, r7, #13
 8000862:	2201      	movs	r2, #1
 8000864:	4619      	mov	r1, r3
 8000866:	2000      	movs	r0, #0
 8000868:	f001 fd5a 	bl	8002320 <MUSART_u8TransmitArraySynch>
	{
		voidSendNAck();
	}


}
 800086c:	e001      	b.n	8000872 <BOOTLOADER_voidHandleEnableRWProtectCmd+0x6c>
		voidSendNAck();
 800086e:	f000 f8b7 	bl	80009e0 <voidSendNAck>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <BOOTLOADER_voidHandleDisableRWProtectCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleDisableRWProtectCmd(uint8_t * Copy_pu8CmdPacket )
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	75fb      	strb	r3, [r7, #23]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	3b04      	subs	r3, #4
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	613b      	str	r3, [r7, #16]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 8000896:	7dfb      	ldrb	r3, [r7, #23]
 8000898:	3b04      	subs	r3, #4
 800089a:	b2db      	uxtb	r3, r3
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4619      	mov	r1, r3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f8c0 	bl	8000a26 <u8VerifyCRC>
 80008a6:	4603      	mov	r3, r0
 80008a8:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d115      	bne.n	80008dc <BOOTLOADER_voidHandleDisableRWProtectCmd+0x62>
	{
		uint8_t Local_u8ErrorStatus = 0 ;
 80008b0:	2300      	movs	r3, #0
 80008b2:	73bb      	strb	r3, [r7, #14]
		voidSendAck(1u);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 f8a2 	bl	80009fe <voidSendAck>
		MFLASH_voidOptionBytesUnlock();
 80008ba:	f000 fc81 	bl	80011c0 <MFLASH_voidOptionBytesUnlock>
		Local_u8ErrorStatus = MFLASH_u8RemoveAllSectorsWriteProtection(FLASH_BANK_1);
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 fc22 	bl	8001108 <MFLASH_u8RemoveAllSectorsWriteProtection>
 80008c4:	4603      	mov	r3, r0
 80008c6:	73bb      	strb	r3, [r7, #14]
		MFLASH_voidOptionBytesLock();
 80008c8:	f000 fc8e 	bl	80011e8 <MFLASH_voidOptionBytesLock>
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8ErrorStatus , 1 );
 80008cc:	f107 030e 	add.w	r3, r7, #14
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	2000      	movs	r0, #0
 80008d6:	f001 fd23 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 80008da:	e001      	b.n	80008e0 <BOOTLOADER_voidHandleDisableRWProtectCmd+0x66>
		voidSendNAck();
 80008dc:	f000 f880 	bl	80009e0 <voidSendNAck>
}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <BOOTLOADER_voidHandleReadSectorStatusCmd>:
 *
 *
 ******************************************************************************
 */
void BOOTLOADER_voidHandleReadSectorStatusCmd(uint8_t * Copy_pu8CmdPacket )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3301      	adds	r3, #1
 80008f6:	75fb      	strb	r3, [r7, #23]
	Local_u32HostCRC  = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - CRC_LENGTH_CMD ));
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	3b04      	subs	r3, #4
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	613b      	str	r3, [r7, #16]
	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - CRC_LENGTH_CMD) , Local_u32HostCRC );
 8000904:	7dfb      	ldrb	r3, [r7, #23]
 8000906:	3b04      	subs	r3, #4
 8000908:	b2db      	uxtb	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4619      	mov	r1, r3
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f889 	bl	8000a26 <u8VerifyCRC>
 8000914:	4603      	mov	r3, r0
 8000916:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d110      	bne.n	8000940 <BOOTLOADER_voidHandleReadSectorStatusCmd+0x58>
	{
		uint8_t Local_u8ReadingSectorsStatus ;
		voidSendAck(1u);
 800091e:	2001      	movs	r0, #1
 8000920:	f000 f86d 	bl	80009fe <voidSendAck>
		Local_u8ReadingSectorsStatus = (uint8_t)MFLASH_u8ReadSectorsWriteProtection(FLASH_BANK_1);
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fc27 	bl	8001178 <MFLASH_u8ReadSectorsWriteProtection>
 800092a:	4603      	mov	r3, r0
 800092c:	b2db      	uxtb	r3, r3
 800092e:	73bb      	strb	r3, [r7, #14]
		MUSART_u8TransmitArraySynch( BOOTLOADER_UART_INDEX , &Local_u8ReadingSectorsStatus , 1 );
 8000930:	f107 030e 	add.w	r3, r7, #14
 8000934:	2201      	movs	r2, #1
 8000936:	4619      	mov	r1, r3
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fcf1 	bl	8002320 <MUSART_u8TransmitArraySynch>
	}
	else
	{
		voidSendNAck();
	}
}
 800093e:	e001      	b.n	8000944 <BOOTLOADER_voidHandleReadSectorStatusCmd+0x5c>
		voidSendNAck();
 8000940:	f000 f84e 	bl	80009e0 <voidSendNAck>
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <BL_voidHandleMemReadCmd>:
/***********************************************************************************************************************/
/******************************************* Not Support Yet ***********************************************************/
/***********************************************************************************************************************/

void BL_voidHandleMemReadCmd(uint8_t * Copy_pu8CmdPacket )
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	75fb      	strb	r3, [r7, #23]

	Local_u32HostCRC = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - 4 ));
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	3b04      	subs	r3, #4
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	613b      	str	r3, [r7, #16]

	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - 4) , Local_u32HostCRC );
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	3b04      	subs	r3, #4
 800096c:	b2db      	uxtb	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4619      	mov	r1, r3
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 f857 	bl	8000a26 <u8VerifyCRC>
 8000978:	4603      	mov	r3, r0
 800097a:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d103      	bne.n	800098a <BL_voidHandleMemReadCmd+0x3e>
	{
		voidSendAck(1u);
 8000982:	2001      	movs	r0, #1
 8000984:	f000 f83b 	bl	80009fe <voidSendAck>
	}
	else
	{
		voidSendNAck();
	}
}
 8000988:	e001      	b.n	800098e <BL_voidHandleMemReadCmd+0x42>
		voidSendNAck();
 800098a:	f000 f829 	bl	80009e0 <voidSendNAck>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <BL_voidHandleOTPReadCmd>:

void BL_voidHandleOTPReadCmd(uint8_t * Copy_pu8CmdPacket )
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8CRCStatus , Local_u8CmdLength  ;
	uint32_t Local_u32HostCRC ;

	Local_u8CmdLength = Copy_pu8CmdPacket [0] + 1 ;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	75fb      	strb	r3, [r7, #23]

	Local_u32HostCRC = *((uint32_t * )(Copy_pu8CmdPacket + Local_u8CmdLength - 4 ));
 80009a6:	7dfb      	ldrb	r3, [r7, #23]
 80009a8:	3b04      	subs	r3, #4
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	613b      	str	r3, [r7, #16]

	Local_u8CRCStatus = u8VerifyCRC (Copy_pu8CmdPacket , (Local_u8CmdLength - 4) , Local_u32HostCRC );
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	3b04      	subs	r3, #4
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4619      	mov	r1, r3
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f832 	bl	8000a26 <u8VerifyCRC>
 80009c2:	4603      	mov	r3, r0
 80009c4:	73fb      	strb	r3, [r7, #15]
	if( Local_u8CRCStatus == CRC_SUCCESS )
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d103      	bne.n	80009d4 <BL_voidHandleOTPReadCmd+0x3e>
	{
		voidSendAck(1u);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f000 f816 	bl	80009fe <voidSendAck>
	}
	else
	{
		voidSendNAck();
	}
}
 80009d2:	e001      	b.n	80009d8 <BL_voidHandleOTPReadCmd+0x42>
		voidSendNAck();
 80009d4:	f000 f804 	bl	80009e0 <voidSendNAck>
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <voidSendNAck>:

/*************************************************************************************************************************************/
/********************************************************* Static Functions implementations ******************************************/
/*************************************************************************************************************************************/
static void voidSendNAck ( void )
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	uint8_t Local_u8NAckBuffer = BOOTLOADER_NACK;
 80009e6:	237f      	movs	r3, #127	; 0x7f
 80009e8:	71fb      	strb	r3, [r7, #7]
	MUSART_u8TransmitArraySynch(BOOTLOADER_UART_INDEX ,  &Local_u8NAckBuffer , 1 );
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	2201      	movs	r2, #1
 80009ee:	4619      	mov	r1, r3
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 fc95 	bl	8002320 <MUSART_u8TransmitArraySynch>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <voidSendAck>:


static void voidSendAck ( uint8_t Copy_u8ReplyLength )
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b084      	sub	sp, #16
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	4603      	mov	r3, r0
 8000a06:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8AckBuffer [2] = {BOOTLOADER_ACK , Copy_u8ReplyLength};
 8000a08:	23a5      	movs	r3, #165	; 0xa5
 8000a0a:	733b      	strb	r3, [r7, #12]
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	737b      	strb	r3, [r7, #13]
	MUSART_u8TransmitArraySynch(BOOTLOADER_UART_INDEX , Local_u8AckBuffer , 2);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2202      	movs	r2, #2
 8000a16:	4619      	mov	r1, r3
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fc81 	bl	8002320 <MUSART_u8TransmitArraySynch>

}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <u8VerifyCRC>:
static uint8_t u8VerifyCRC(uint8_t * Copy_pu8DataArray , uint8_t Copy_u8Length , uint32_t Copy_u8HostCRC )
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b088      	sub	sp, #32
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	72fb      	strb	r3, [r7, #11]
	uint8_t  Local_u8CRCStatus ;
	uint32_t Local_u32AccumulateCRC , Local_u32Temp     ;
	for (uint8_t Local_u8Iterator = 0 ; Local_u8Iterator< Copy_u8Length ; Local_u8Iterator++ )
 8000a34:	2300      	movs	r3, #0
 8000a36:	75fb      	strb	r3, [r7, #23]
 8000a38:	e00e      	b.n	8000a58 <u8VerifyCRC+0x32>
	{
		Local_u32Temp = Copy_pu8DataArray[Local_u8Iterator];
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	613b      	str	r3, [r7, #16]
		Local_u32AccumulateCRC = MCRC_u32Accumulate(&Local_u32Temp, 1 );
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f8e6 	bl	8000c1c <MCRC_u32Accumulate>
 8000a50:	61b8      	str	r0, [r7, #24]
	for (uint8_t Local_u8Iterator = 0 ; Local_u8Iterator< Copy_u8Length ; Local_u8Iterator++ )
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	3301      	adds	r3, #1
 8000a56:	75fb      	strb	r3, [r7, #23]
 8000a58:	7dfa      	ldrb	r2, [r7, #23]
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3ec      	bcc.n	8000a3a <u8VerifyCRC+0x14>
	}
	MCRC_voidDRreset();
 8000a60:	f000 f900 	bl	8000c64 <MCRC_voidDRreset>
	if (Local_u32AccumulateCRC == Copy_u8HostCRC )
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d102      	bne.n	8000a72 <u8VerifyCRC+0x4c>
	{
		Local_u8CRCStatus = CRC_SUCCESS ;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	77fb      	strb	r3, [r7, #31]
 8000a70:	e001      	b.n	8000a76 <u8VerifyCRC+0x50>
	}
	else
	{
		Local_u8CRCStatus = CRC_FAIL ;
 8000a72:	2301      	movs	r3, #1
 8000a74:	77fb      	strb	r3, [r7, #31]
	}
	return Local_u8CRCStatus ;
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <u8ValidateAddress>:
static uint8_t u8ValidateAddress ( uint32_t Copy_u32Address )
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8AddressStatus ;
	if(( Copy_u32Address >= FLASH_BASE ) && (Copy_u32Address < FLASH_END))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a8e:	d306      	bcc.n	8000a9e <u8ValidateAddress+0x1e>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <u8ValidateAddress+0x48>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d802      	bhi.n	8000a9e <u8ValidateAddress+0x1e>
	{
		Local_u8AddressStatus = VALID_ADDRESS ;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e00c      	b.n	8000ab8 <u8ValidateAddress+0x38>
	}
	else if(( Copy_u32Address >= SRAM1_BASE ) && (Copy_u32Address  < SRAM1_END))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aa4:	d306      	bcc.n	8000ab4 <u8ValidateAddress+0x34>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <u8ValidateAddress+0x4c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d802      	bhi.n	8000ab4 <u8ValidateAddress+0x34>
	{
		Local_u8AddressStatus = VALID_ADDRESS ;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	73fb      	strb	r3, [r7, #15]
 8000ab2:	e001      	b.n	8000ab8 <u8ValidateAddress+0x38>
	}
	else
	{
		Local_u8AddressStatus = INVALID_ADDRESS ;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8AddressStatus ;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	081ffffe 	.word	0x081ffffe
 8000acc:	2002ffff 	.word	0x2002ffff

08000ad0 <u8ExecuteMemoryWrite>:
static uint8_t u8ExecuteMemoryWrite ( uint8_t *Copy_u8Buffer , uint32_t Copy_u32Address , uint8_t Copy_u8Length )
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	4613      	mov	r3, r2
 8000adc:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorStatus = ERROR_STATE_OK ;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	75fb      	strb	r3, [r7, #23]
	if (( Copy_u32Address >= FLASH_BASE ) && (Copy_u32Address < FLASH_END))
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ae8:	d324      	bcc.n	8000b34 <u8ExecuteMemoryWrite+0x64>
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <u8ExecuteMemoryWrite+0x98>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d820      	bhi.n	8000b34 <u8ExecuteMemoryWrite+0x64>
	{
		uint8_t Local_u8Iterator ;
		MFLASH_voidUnlock();
 8000af2:	f000 fa21 	bl	8000f38 <MFLASH_voidUnlock>
		for (Local_u8Iterator=0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	75bb      	strb	r3, [r7, #22]
 8000afa:	e014      	b.n	8000b26 <u8ExecuteMemoryWrite+0x56>
		{
			Local_u8ErrorStatus = MFLASH_u8WriteProgram(FLASH_TYPEPROGRAM_BYTE, Copy_u32Address + Local_u8Iterator ,(uint64_t) Copy_u8Buffer[Local_u8Iterator]);
 8000afc:	7dba      	ldrb	r2, [r7, #22]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	18d1      	adds	r1, r2, r3
 8000b02:	7dbb      	ldrb	r3, [r7, #22]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	461c      	mov	r4, r3
 8000b10:	4615      	mov	r5, r2
 8000b12:	4622      	mov	r2, r4
 8000b14:	462b      	mov	r3, r5
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fa7c 	bl	8001014 <MFLASH_u8WriteProgram>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	75fb      	strb	r3, [r7, #23]
		for (Local_u8Iterator=0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 8000b20:	7dbb      	ldrb	r3, [r7, #22]
 8000b22:	3301      	adds	r3, #1
 8000b24:	75bb      	strb	r3, [r7, #22]
 8000b26:	7dba      	ldrb	r2, [r7, #22]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3e6      	bcc.n	8000afc <u8ExecuteMemoryWrite+0x2c>
		}
		MFLASH_voidLock();
 8000b2e:	f000 fa1b 	bl	8000f68 <MFLASH_voidLock>
	{
 8000b32:	e013      	b.n	8000b5c <u8ExecuteMemoryWrite+0x8c>
	}
	else
	{
		uint8_t Local_u8Iterator ;
		uint8_t* Local_pu8Destination = (uint8_t *)Copy_u32Address ;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	613b      	str	r3, [r7, #16]
		for (Local_u8Iterator=0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	757b      	strb	r3, [r7, #21]
 8000b3c:	e00a      	b.n	8000b54 <u8ExecuteMemoryWrite+0x84>
		{
			Local_pu8Destination[Local_u8Iterator]=Copy_u8Buffer[Local_u8Iterator];
 8000b3e:	7d7b      	ldrb	r3, [r7, #21]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	441a      	add	r2, r3
 8000b44:	7d7b      	ldrb	r3, [r7, #21]
 8000b46:	6939      	ldr	r1, [r7, #16]
 8000b48:	440b      	add	r3, r1
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	701a      	strb	r2, [r3, #0]
		for (Local_u8Iterator=0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 8000b4e:	7d7b      	ldrb	r3, [r7, #21]
 8000b50:	3301      	adds	r3, #1
 8000b52:	757b      	strb	r3, [r7, #21]
 8000b54:	7d7a      	ldrb	r2, [r7, #21]
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d3f0      	bcc.n	8000b3e <u8ExecuteMemoryWrite+0x6e>
		}
	}
	return Local_u8ErrorStatus ;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bdb0      	pop	{r4, r5, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	081ffffe 	.word	0x081ffffe

08000b6c <u8ExecuteFlashErase>:
static uint8_t u8ExecuteFlashErase ( uint8_t Copy_u8SectorIndex , uint8_t Copy_u8NumberOfSector )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorStatus = ERROR_STATE_OK ;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if      ((Copy_u8NumberOfSector > MAX_SECTORS_NUMBER )  && (Copy_u8SectorIndex != MASS_ERASE_MASK ))
 8000b82:	79bb      	ldrb	r3, [r7, #6]
 8000b84:	2b18      	cmp	r3, #24
 8000b86:	d906      	bls.n	8000b96 <u8ExecuteFlashErase+0x2a>
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2bff      	cmp	r3, #255	; 0xff
 8000b8c:	d003      	beq.n	8000b96 <u8ExecuteFlashErase+0x2a>
	{
		Local_u8ErrorStatus = ERROR_STATE_NOK ;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b94:	e03b      	b.n	8000c0e <u8ExecuteFlashErase+0xa2>
	}
	else if ((Copy_u8SectorIndex > (MAX_SECTORS_NUMBER-1) ) && (Copy_u8SectorIndex != MASS_ERASE_MASK ))
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b17      	cmp	r3, #23
 8000b9a:	d906      	bls.n	8000baa <u8ExecuteFlashErase+0x3e>
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2bff      	cmp	r3, #255	; 0xff
 8000ba0:	d003      	beq.n	8000baa <u8ExecuteFlashErase+0x3e>
	{
		Local_u8ErrorStatus = ERROR_STATE_NOK ;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ba8:	e031      	b.n	8000c0e <u8ExecuteFlashErase+0xa2>
	}
	else
	{
		FLASH_EraseInitTypeDef Local_Erase ;
		uint32_t Local_u32SectorError ;
		if (Copy_u8SectorIndex == MASS_ERASE_MASK )
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2bff      	cmp	r3, #255	; 0xff
 8000bae:	d102      	bne.n	8000bb6 <u8ExecuteFlashErase+0x4a>
		{
			Local_Erase.TypeErase = FLASH_TYPEERASE_MASSERASE ;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	e012      	b.n	8000bdc <u8ExecuteFlashErase+0x70>
		}
		else
		{
			uint8_t Local_u8RamainingSector = MAX_SECTORS_NUMBER - Copy_u8SectorIndex ;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f1c3 0318 	rsb	r3, r3, #24
 8000bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (Copy_u8NumberOfSector > Local_u8RamainingSector)
 8000bc0:	79ba      	ldrb	r2, [r7, #6]
 8000bc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d902      	bls.n	8000bd0 <u8ExecuteFlashErase+0x64>
			{
				Copy_u8NumberOfSector = Local_u8RamainingSector ;
 8000bca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bce:	71bb      	strb	r3, [r7, #6]
			}
			Local_Erase.TypeErase = FLASH_TYPEERASE_SECTORS ;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
			Local_Erase.Sector    = Copy_u8SectorIndex ;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	61bb      	str	r3, [r7, #24]
			Local_Erase.NbSectors = Copy_u8NumberOfSector ;
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	61fb      	str	r3, [r7, #28]
		}
		Local_Erase.VoltageRange = FLASH_VOLTAGE_RANGE_3 ;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
		if (Copy_u8NumberOfSector > MAX_SECTORS_BANK_NUMBER )
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	2b0c      	cmp	r3, #12
 8000be4:	d902      	bls.n	8000bec <u8ExecuteFlashErase+0x80>
		{
			Local_Erase.Banks        = FLASH_BANK_2 ;
 8000be6:	2302      	movs	r3, #2
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e001      	b.n	8000bf0 <u8ExecuteFlashErase+0x84>
		}
		else
		{
			Local_Erase.Banks        = FLASH_BANK_1 ;
 8000bec:	2301      	movs	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
		}
		MFLASH_voidUnlock();
 8000bf0:	f000 f9a2 	bl	8000f38 <MFLASH_voidUnlock>
		Local_u8ErrorStatus = MFLASH_u8Erase(&Local_Erase,&Local_u32SectorError);
 8000bf4:	f107 020c 	add.w	r2, r7, #12
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f9c2 	bl	8000f88 <MFLASH_u8Erase>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MFLASH_voidLock();
 8000c0a:	f000 f9ad 	bl	8000f68 <MFLASH_voidLock>
	}
	return Local_u8ErrorStatus ;
 8000c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MCRC_u32Accumulate>:
 *
 *
 ******************************************************************************
 */
uint32_t MCRC_u32Accumulate ( uint32_t Copy_pu32Buffer[], uint32_t Copy_u32BufferLength )
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t Local_u32Temp = 0U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  for (uint32_t Local_u32Index = 0U ; Local_u32Index < Copy_u32BufferLength ; Local_u32Index++ )
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	e009      	b.n	8000c44 <MCRC_u32Accumulate+0x28>
  {
      CRC->DR = Copy_pu32Buffer[Local_u32Index];
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <MCRC_u32Accumulate+0x44>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6013      	str	r3, [r2, #0]
  for (uint32_t Local_u32Index = 0U ; Local_u32Index < Copy_u32BufferLength ; Local_u32Index++ )
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3f1      	bcc.n	8000c30 <MCRC_u32Accumulate+0x14>
  }
  Local_u32Temp = CRC->DR;
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <MCRC_u32Accumulate+0x44>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60bb      	str	r3, [r7, #8]
  return Local_u32Temp;
 8000c52:	68bb      	ldr	r3, [r7, #8]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40023000 	.word	0x40023000

08000c64 <MCRC_voidDRreset>:
 *
 *
 ******************************************************************************
 */
void MCRC_voidDRreset(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	CRC->CR |= CRC_CR_RESET_MASK << CRC_CR_RESET_Pos ;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <MCRC_voidDRreset+0x1c>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <MCRC_voidDRreset+0x1c>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6093      	str	r3, [r2, #8]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023000 	.word	0x40023000

08000c84 <EXTI0_IRQHandler>:
}
/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void EXTI0_IRQHandler         ( void )
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE0] != NULL )
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <EXTI0_IRQHandler+0x24>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d008      	beq.n	8000ca2 <EXTI0_IRQHandler+0x1e>
	{
		 SET_BIT( EXTI->PR , LINE0 );
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <EXTI0_IRQHandler+0x28>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <EXTI0_IRQHandler+0x28>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE0]();
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <EXTI0_IRQHandler+0x24>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4798      	blx	r3
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000068 	.word	0x20000068
 8000cac:	40013c00 	.word	0x40013c00

08000cb0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler         ( void )
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE1] != NULL )
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <EXTI1_IRQHandler+0x24>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d008      	beq.n	8000cce <EXTI1_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE1 );
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <EXTI1_IRQHandler+0x28>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <EXTI1_IRQHandler+0x28>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE1]();
 8000cc8:	4b02      	ldr	r3, [pc, #8]	; (8000cd4 <EXTI1_IRQHandler+0x24>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4798      	blx	r3
	}
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000068 	.word	0x20000068
 8000cd8:	40013c00 	.word	0x40013c00

08000cdc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler         ( void )
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE2] != NULL )
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <EXTI2_IRQHandler+0x24>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d008      	beq.n	8000cfa <EXTI2_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE2 );
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <EXTI2_IRQHandler+0x28>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <EXTI2_IRQHandler+0x28>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6153      	str	r3, [r2, #20]
	    EXTI_ApfCallBack[LINE2]();
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <EXTI2_IRQHandler+0x24>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4798      	blx	r3
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000068 	.word	0x20000068
 8000d04:	40013c00 	.word	0x40013c00

08000d08 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler         ( void )
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE3] != NULL )
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <EXTI3_IRQHandler+0x24>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d008      	beq.n	8000d26 <EXTI3_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE3 );
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <EXTI3_IRQHandler+0x28>)
 8000d16:	695b      	ldr	r3, [r3, #20]
 8000d18:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <EXTI3_IRQHandler+0x28>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE3]();
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <EXTI3_IRQHandler+0x24>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	4798      	blx	r3
	}
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000068 	.word	0x20000068
 8000d30:	40013c00 	.word	0x40013c00

08000d34 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler         ( void )
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE4] != NULL )
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <EXTI4_IRQHandler+0x24>)
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d008      	beq.n	8000d52 <EXTI4_IRQHandler+0x1e>
	{
		SET_BIT( EXTI->PR , LINE4 );
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <EXTI4_IRQHandler+0x28>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <EXTI4_IRQHandler+0x28>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE4]();
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <EXTI4_IRQHandler+0x24>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	4798      	blx	r3
	}
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000068 	.word	0x20000068
 8000d5c:	40013c00 	.word	0x40013c00

08000d60 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler         ( void )
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE5] != NULL && EXTI_LINE5_FLAGE == EXTI_LINE_RISING )
 8000d64:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00f      	beq.n	8000d8c <EXTI9_5_IRQHandler+0x2c>
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	095b      	lsrs	r3, r3, #5
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d108      	bne.n	8000d8c <EXTI9_5_IRQHandler+0x2c>
	{
		SET_BIT( EXTI->PR , LINE5 );
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a2d      	ldr	r2, [pc, #180]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000d80:	f043 0320 	orr.w	r3, r3, #32
 8000d84:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE5]();
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE6] != NULL && EXTI_LINE6_FLAGE == EXTI_LINE_RISING )
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00f      	beq.n	8000db4 <EXTI9_5_IRQHandler+0x54>
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	099b      	lsrs	r3, r3, #6
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <EXTI9_5_IRQHandler+0x54>
	{
		SET_BIT( EXTI->PR , LINE6 );
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a23      	ldr	r2, [pc, #140]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dac:	6153      	str	r3, [r2, #20]
	    EXTI_ApfCallBack[LINE6]();
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE7] != NULL && EXTI_LINE7_FLAGE == EXTI_LINE_RISING )
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00f      	beq.n	8000ddc <EXTI9_5_IRQHandler+0x7c>
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	09db      	lsrs	r3, r3, #7
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d108      	bne.n	8000ddc <EXTI9_5_IRQHandler+0x7c>
	{
		SET_BIT( EXTI->PR , LINE7 );
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd4:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE7]();
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE8] != NULL && EXTI_LINE8_FLAGE == EXTI_LINE_RISING )
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000dde:	6a1b      	ldr	r3, [r3, #32]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00f      	beq.n	8000e04 <EXTI9_5_IRQHandler+0xa4>
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <EXTI9_5_IRQHandler+0xa4>
	{
		SET_BIT( EXTI->PR , LINE8 );
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE8]();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE9] != NULL && EXTI_LINE9_FLAGE == EXTI_LINE_RISING )
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00f      	beq.n	8000e2c <EXTI9_5_IRQHandler+0xcc>
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	0a5b      	lsrs	r3, r3, #9
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d108      	bne.n	8000e2c <EXTI9_5_IRQHandler+0xcc>
	{
		SET_BIT( EXTI->PR , LINE9 );
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <EXTI9_5_IRQHandler+0xd4>)
 8000e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e24:	6153      	str	r3, [r2, #20]
		EXTI_ApfCallBack[LINE9]();
 8000e26:	4b02      	ldr	r3, [pc, #8]	; (8000e30 <EXTI9_5_IRQHandler+0xd0>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	4798      	blx	r3
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000068 	.word	0x20000068
 8000e34:	40013c00 	.word	0x40013c00

08000e38 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler         ( void )
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	if ( EXTI_ApfCallBack[LINE10] != NULL && EXTI_LINE10_FLAGE == EXTI_LINE_RISING )
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00f      	beq.n	8000e64 <EXTI15_10_IRQHandler+0x2c>
 8000e44:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	0a9b      	lsrs	r3, r3, #10
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d108      	bne.n	8000e64 <EXTI15_10_IRQHandler+0x2c>
	{
		 SET_BIT( EXTI->PR , LINE10 );
 8000e52:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a37      	ldr	r2, [pc, #220]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5c:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE10]();
 8000e5e:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE11] != NULL && EXTI_LINE11_FLAGE == EXTI_LINE_RISING )
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d00f      	beq.n	8000e8c <EXTI15_10_IRQHandler+0x54>
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	0adb      	lsrs	r3, r3, #11
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <EXTI15_10_IRQHandler+0x54>
	{
		 SET_BIT( EXTI->PR , LINE11 );
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e84:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE11]();
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE12] != NULL && EXTI_LINE12_FLAGE == EXTI_LINE_RISING )
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00f      	beq.n	8000eb4 <EXTI15_10_IRQHandler+0x7c>
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	0b1b      	lsrs	r3, r3, #12
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d108      	bne.n	8000eb4 <EXTI15_10_IRQHandler+0x7c>
	{
		 SET_BIT( EXTI->PR , LINE12 );
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eac:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE12]();
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE13] != NULL && EXTI_LINE13_FLAGE == EXTI_LINE_RISING )
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00f      	beq.n	8000edc <EXTI15_10_IRQHandler+0xa4>
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	0b5b      	lsrs	r3, r3, #13
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d108      	bne.n	8000edc <EXTI15_10_IRQHandler+0xa4>
	{
		 SET_BIT( EXTI->PR , LINE13 );
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ed0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ed4:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE13]();
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eda:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE14] != NULL && EXTI_LINE14_FLAGE == EXTI_LINE_RISING )
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d00f      	beq.n	8000f04 <EXTI15_10_IRQHandler+0xcc>
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	0b9b      	lsrs	r3, r3, #14
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d108      	bne.n	8000f04 <EXTI15_10_IRQHandler+0xcc>
	{
		 SET_BIT( EXTI->PR , LINE14 );
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE14]();
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f02:	4798      	blx	r3
	}
	if ( EXTI_ApfCallBack[LINE15] != NULL && EXTI_LINE15_FLAGE == EXTI_LINE_RISING )
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00f      	beq.n	8000f2c <EXTI15_10_IRQHandler+0xf4>
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	0bdb      	lsrs	r3, r3, #15
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d108      	bne.n	8000f2c <EXTI15_10_IRQHandler+0xf4>
	{
		 SET_BIT( EXTI->PR , LINE15 );
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <EXTI15_10_IRQHandler+0xfc>)
 8000f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f24:	6153      	str	r3, [r2, #20]
		 EXTI_ApfCallBack[LINE15]();
 8000f26:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <EXTI15_10_IRQHandler+0xf8>)
 8000f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2a:	4798      	blx	r3
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000068 	.word	0x20000068
 8000f34:	40013c00 	.word	0x40013c00

08000f38 <MFLASH_voidUnlock>:
 *
 *
 ******************************************************************************
 */
void MFLASH_voidUnlock(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != FLASH_FLAG_LOW )
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MFLASH_voidUnlock+0x24>)
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	da05      	bge.n	8000f50 <MFLASH_voidUnlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <MFLASH_voidUnlock+0x24>)
 8000f46:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <MFLASH_voidUnlock+0x28>)
 8000f48:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <MFLASH_voidUnlock+0x24>)
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <MFLASH_voidUnlock+0x2c>)
 8000f4e:	605a      	str	r2, [r3, #4]

  }
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00
 8000f60:	45670123 	.word	0x45670123
 8000f64:	cdef89ab 	.word	0xcdef89ab

08000f68 <MFLASH_voidLock>:
 *
 *
 ******************************************************************************
 */
void MFLASH_voidLock(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <MFLASH_voidLock+0x1c>)
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <MFLASH_voidLock+0x1c>)
 8000f72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f76:	6113      	str	r3, [r2, #16]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <MFLASH_u8Erase>:
 *
 *
 ******************************************************************************
 */
uint8_t MFLASH_u8Erase(FLASH_EraseInitTypeDef *Copy_pEraseInit, uint32_t *Local_pu32SectorError)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	uint8_t Local_u8ErrorStatus = ERROR_STATE_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	72fb      	strb	r3, [r7, #11]
	if (Local_u8ErrorStatus == ERROR_STATE_OK)
 8000f96:	7afb      	ldrb	r3, [r7, #11]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d133      	bne.n	8001004 <MFLASH_u8Erase+0x7c>
	{
		/*Initialization of SectorError variable*/
		*Local_pu32SectorError = 0xFFFFFFFFU;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa2:	601a      	str	r2, [r3, #0]
		if (Copy_pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d10f      	bne.n	8000fcc <MFLASH_u8Erase+0x44>
		{
			/*Mass erase to be done*/
			voidMassErase((uint8_t) Copy_pEraseInit->VoltageRange, Copy_pEraseInit->Banks);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4610      	mov	r0, r2
 8000fba:	f000 f9bd 	bl	8001338 <voidMassErase>
			/* if the erase operation is completed, disable the MER Bit */
			FLASH->CR &= (~(FLASH_CR_MER_Msk << FLASH_CR_MER_Pos));
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <MFLASH_u8Erase+0x88>)
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MFLASH_u8Erase+0x88>)
 8000fc4:	f023 0304 	bic.w	r3, r3, #4
 8000fc8:	6113      	str	r3, [r2, #16]
 8000fca:	e01b      	b.n	8001004 <MFLASH_u8Erase+0x7c>
		}
		else
		{
			/* Erase by sector by sector to be done*/
			for ( uint32_t Local_u8Index = Copy_pEraseInit->Sector; Local_u8Index < (Copy_pEraseInit->NbSectors + Copy_pEraseInit->Sector); Local_u8Index++)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e00f      	b.n	8000ff4 <MFLASH_u8Erase+0x6c>
			{
				voidEraseSector(Local_u8Index, (uint8_t) Copy_pEraseInit->VoltageRange);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f000 f9cf 	bl	8001380 <voidEraseSector>
				/* If the erase operation is completed, disable the SER and SNB Bits */
				CLEAR_BIT(FLASH->CR, ((FLASH_CR_SER_Msk << FLASH_CR_SER_Pos) | (FLASH_CR_SNB_Msk << FLASH_CR_SNB_Pos)));
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <MFLASH_u8Erase+0x88>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <MFLASH_u8Erase+0x88>)
 8000fe8:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000fec:	6113      	str	r3, [r2, #16]
			for ( uint32_t Local_u8Index = Copy_pEraseInit->Sector; Local_u8Index < (Copy_pEraseInit->NbSectors + Copy_pEraseInit->Sector); Local_u8Index++)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3e7      	bcc.n	8000fd4 <MFLASH_u8Erase+0x4c>
			}
		}
	}
	return Local_u8ErrorStatus;
 8001004:	7afb      	ldrb	r3, [r7, #11]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023c00 	.word	0x40023c00

08001014 <MFLASH_u8WriteProgram>:
 *
 *
 ******************************************************************************
 */
uint8_t MFLASH_u8WriteProgram(uint32_t Copy_u32TypeProgram, uint32_t Copy_u32Address, uint64_t Copy_u64Data)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t Local_u8ErrorStatus = ERROR_STATE_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	75fb      	strb	r3, [r7, #23]
	if(Local_u8ErrorStatus == ERROR_STATE_OK)
 8001026:	7dfb      	ldrb	r3, [r7, #23]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d125      	bne.n	8001078 <MFLASH_u8WriteProgram+0x64>
	{
		if(Copy_u32TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <MFLASH_u8WriteProgram+0x2a>
		{
			/*Program byte (8-bit) at a specified address.*/
			voidProgramByte(Copy_u32Address, (uint8_t) Copy_u64Data);
 8001032:	783b      	ldrb	r3, [r7, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	68b8      	ldr	r0, [r7, #8]
 8001038:	f000 f95c 	bl	80012f4 <voidProgramByte>
 800103c:	e016      	b.n	800106c <MFLASH_u8WriteProgram+0x58>
		}
		else if(Copy_u32TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d105      	bne.n	8001050 <MFLASH_u8WriteProgram+0x3c>
		{
			/*Program halfword (16-bit) at a specified address.*/
			voidProgramHalfWord(Copy_u32Address, (uint16_t) Copy_u64Data);
 8001044:	883b      	ldrh	r3, [r7, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	68b8      	ldr	r0, [r7, #8]
 800104a:	f000 f92f 	bl	80012ac <voidProgramHalfWord>
 800104e:	e00d      	b.n	800106c <MFLASH_u8WriteProgram+0x58>
		}
		else if(Copy_u32TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d105      	bne.n	8001062 <MFLASH_u8WriteProgram+0x4e>
		{
			/*Program word (32-bit) at a specified address.*/
			voidProgramWord(Copy_u32Address, (uint32_t) Copy_u64Data);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	68b8      	ldr	r0, [r7, #8]
 800105c:	f000 f904 	bl	8001268 <voidProgramWord>
 8001060:	e004      	b.n	800106c <MFLASH_u8WriteProgram+0x58>
		}
		else
		{
			/*Program double word (64-bit) at a specified address.*/
			voidProgramDoubleWord(Copy_u32Address, Copy_u64Data);
 8001062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001066:	68b8      	ldr	r0, [r7, #8]
 8001068:	f000 f8ce 	bl	8001208 <voidProgramDoubleWord>
		}
		/* If the program operation is completed, disable the PG Bit */
		FLASH->CR &= (~(FLASH_CR_PG_Msk << FLASH_CR_PG_Pos));
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <MFLASH_u8WriteProgram+0x70>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <MFLASH_u8WriteProgram+0x70>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	6113      	str	r3, [r2, #16]
	}
	return Local_u8ErrorStatus;
 8001078:	7dfb      	ldrb	r3, [r7, #23]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <MFLASH_u8MaskAllSectorsWriteProtection>:
 *     Copy_u32SectorsMask = 0b00000100 ;
 *     Write Protection at Sector 2
 ******************************************************************************
 */
uint8_t MFLASH_u8MaskAllSectorsWriteProtection( uint8_t Copy_u32SectorsMask , uint8_t Copy_u8BankIndex )
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorStatus = ERROR_STATE_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
	if(Local_u8ErrorStatus == ERROR_STATE_OK)
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d129      	bne.n	80010f6 <MFLASH_u8MaskAllSectorsWriteProtection+0x6e>
	{
		/* Wait bsy flag */
		while(FLASH_FLAG_LOW != (FLASH->SR & FLASH_SR_BSY));
 80010a2:	bf00      	nop
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f9      	bne.n	80010a4 <MFLASH_u8MaskAllSectorsWriteProtection+0x1c>
		if (Copy_u8BankIndex == 2 )
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d109      	bne.n	80010ca <MFLASH_u8MaskAllSectorsWriteProtection+0x42>
		{
			/* Bank 2 */
			FLASH->OPTCR1 &= ~(( Copy_u32SectorsMask ) << FLASH_OPTCR_NWRP_Pos);
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	79fa      	ldrb	r2, [r7, #7]
 80010bc:	0412      	lsls	r2, r2, #16
 80010be:	43d2      	mvns	r2, r2
 80010c0:	4611      	mov	r1, r2
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010c4:	400b      	ands	r3, r1
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	e008      	b.n	80010dc <MFLASH_u8MaskAllSectorsWriteProtection+0x54>
		}
		else
		{
			/* Bank 1 */
			FLASH->OPTCR &= ~(( Copy_u32SectorsMask ) << FLASH_OPTCR_NWRP_Pos);
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	0412      	lsls	r2, r2, #16
 80010d2:	43d2      	mvns	r2, r2
 80010d4:	4611      	mov	r1, r2
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010d8:	400b      	ands	r3, r1
 80010da:	6153      	str	r3, [r2, #20]
		}
		/* Start sector write protection */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4a08      	ldr	r2, [pc, #32]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6153      	str	r3, [r2, #20]
		/* Wait bsy flag */
		while(FLASH_FLAG_LOW != (FLASH->SR & FLASH_SR_BSY));
 80010e8:	bf00      	nop
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MFLASH_u8MaskAllSectorsWriteProtection+0x7c>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <MFLASH_u8MaskAllSectorsWriteProtection+0x62>
	}
	return Local_u8ErrorStatus;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40023c00 	.word	0x40023c00

08001108 <MFLASH_u8RemoveAllSectorsWriteProtection>:
 *
 *
 ******************************************************************************
 */
uint8_t MFLASH_u8RemoveAllSectorsWriteProtection ( uint8_t Copy_u8BankIndex )
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorStatus = ERROR_STATE_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
	if(Local_u8ErrorStatus == ERROR_STATE_OK)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d123      	bne.n	8001164 <MFLASH_u8RemoveAllSectorsWriteProtection+0x5c>
	{
		/* Wait bsy flag */
		while(FLASH_FLAG_LOW != (FLASH->SR & FLASH_SR_BSY));
 800111c:	bf00      	nop
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f9      	bne.n	800111e <MFLASH_u8RemoveAllSectorsWriteProtection+0x16>
		if (Copy_u8BankIndex == 2 )
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d106      	bne.n	800113e <MFLASH_u8RemoveAllSectorsWriteProtection+0x36>
		{
			/* Bank 2 */
			FLASH->OPTCR1 |= ((FLASH_OPTCR_NWRP_MASK)  << FLASH_OPTCR_NWRP_Pos);
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 8001136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	e005      	b.n	800114a <MFLASH_u8RemoveAllSectorsWriteProtection+0x42>
		}
		else
		{
			/* Bank 1 */
			FLASH->OPTCR |= ((FLASH_OPTCR_NWRP_MASK)  << FLASH_OPTCR_NWRP_Pos);
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 8001144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001148:	6153      	str	r3, [r2, #20]
		}
		/* Start sector write protection */
		FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6153      	str	r3, [r2, #20]
		/* Wait bsy flag */
		while(FLASH_FLAG_LOW != (FLASH->SR & FLASH_SR_BSY));
 8001156:	bf00      	nop
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MFLASH_u8RemoveAllSectorsWriteProtection+0x6c>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f9      	bne.n	8001158 <MFLASH_u8RemoveAllSectorsWriteProtection+0x50>
	}
	return Local_u8ErrorStatus;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40023c00 	.word	0x40023c00

08001178 <MFLASH_u8ReadSectorsWriteProtection>:
 *
 *
 ******************************************************************************
 */
uint32_t MFLASH_u8ReadSectorsWriteProtection ( uint8_t Copy_u8BankIndex  )
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	uint32_t Local_u32EReadSectorWriteProtection ;
	if ( Copy_u8BankIndex == 2 )
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d103      	bne.n	8001190 <MFLASH_u8ReadSectorsWriteProtection+0x18>
	{
		Local_u32EReadSectorWriteProtection = FLASH->OPTCR1 ;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MFLASH_u8ReadSectorsWriteProtection+0x44>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	e002      	b.n	8001196 <MFLASH_u8ReadSectorsWriteProtection+0x1e>
	}
	else
	{
		Local_u32EReadSectorWriteProtection = FLASH->OPTCR ;
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MFLASH_u8ReadSectorsWriteProtection+0x44>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	60fb      	str	r3, [r7, #12]
	}
	CLR_BIT(Local_u32EReadSectorWriteProtection,FLASH_OPTCR_DB1M_Pos  );
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800119c:	60fb      	str	r3, [r7, #12]
	CLR_BIT(Local_u32EReadSectorWriteProtection,FLASH_OPTCR_SPRMOD_Pos);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	60fb      	str	r3, [r7, #12]
	Local_u32EReadSectorWriteProtection = Local_u32EReadSectorWriteProtection >> FLASH_OPTCR_NWRP_Pos ;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	0c1b      	lsrs	r3, r3, #16
 80011aa:	60fb      	str	r3, [r7, #12]
	return Local_u32EReadSectorWriteProtection;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <MFLASH_voidOptionBytesUnlock>:
 *
 *
 ******************************************************************************
 */
void MFLASH_voidOptionBytesUnlock(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
	/* Write OPTKEY1 */
	FLASH->OPTKEYR = FLASH_OPTKEYR1;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <MFLASH_voidOptionBytesUnlock+0x1c>)
 80011c6:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <MFLASH_voidOptionBytesUnlock+0x20>)
 80011c8:	609a      	str	r2, [r3, #8]
	/* Write OPTKEY2 */
	FLASH->OPTKEYR = FLASH_OPTKEYR2;
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <MFLASH_voidOptionBytesUnlock+0x1c>)
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <MFLASH_voidOptionBytesUnlock+0x24>)
 80011ce:	609a      	str	r2, [r3, #8]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00
 80011e0:	08192a3b 	.word	0x08192a3b
 80011e4:	4c5d6e7f 	.word	0x4c5d6e7f

080011e8 <MFLASH_voidOptionBytesLock>:
 *
 *
 ******************************************************************************
 */
void MFLASH_voidOptionBytesLock(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MFLASH_voidOptionBytesLock+0x1c>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <MFLASH_voidOptionBytesLock+0x1c>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6153      	str	r3, [r2, #20]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <voidProgramDoubleWord>:
/*************************************************************************************************************************************/
/********************************************************* Static Functions implementations ******************************************/
/*************************************************************************************************************************************/

static void voidProgramDoubleWord(uint32_t Copy_u32Address, uint64_t Copy_u64Data)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	e9c7 2300 	strd	r2, r3, [r7]

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PSIZE_Msk << FLASH_CR_PSIZE_Pos));
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <voidProgramDoubleWord+0x5c>)
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <voidProgramDoubleWord+0x5c>)
 800121a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <voidProgramDoubleWord+0x5c>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <voidProgramDoubleWord+0x5c>)
 8001226:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800122a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= (FLASH_CR_PG_Msk << FLASH_CR_PG_Pos);
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <voidProgramDoubleWord+0x5c>)
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <voidProgramDoubleWord+0x5c>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(volatile uint32_t*)Copy_u32Address = (uint32_t)Copy_u64Data;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	601a      	str	r2, [r3, #0]

  *(volatile uint32_t*)(Copy_u32Address+4) = (uint32_t)(Copy_u64Data >> 32);
 800123e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	000a      	movs	r2, r1
 800124c:	2300      	movs	r3, #0
 800124e:	68f9      	ldr	r1, [r7, #12]
 8001250:	3104      	adds	r1, #4
 8001252:	4613      	mov	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <voidProgramWord>:

static void voidProgramWord(uint32_t Copy_u32Address, uint32_t Copy_u32Data)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PSIZE_Msk << FLASH_CR_PSIZE_Pos));
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <voidProgramWord+0x40>)
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <voidProgramWord+0x40>)
 8001278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800127c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <voidProgramWord+0x40>)
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <voidProgramWord+0x40>)
 8001284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001288:	6113      	str	r3, [r2, #16]
  FLASH->CR |= (FLASH_CR_PG_Msk << FLASH_CR_PG_Pos);
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <voidProgramWord+0x40>)
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <voidProgramWord+0x40>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6113      	str	r3, [r2, #16]

  *(volatile uint32_t*)Copy_u32Address = Copy_u32Data;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40023c00 	.word	0x40023c00

080012ac <voidProgramHalfWord>:

static void voidProgramHalfWord(uint32_t Copy_u32Address, uint16_t Copy_u16Data)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PSIZE_Msk << FLASH_CR_PSIZE_Pos));
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <voidProgramHalfWord+0x44>)
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <voidProgramHalfWord+0x44>)
 80012be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <voidProgramHalfWord+0x44>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <voidProgramHalfWord+0x44>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= (FLASH_CR_PG_Msk << FLASH_CR_PG_Pos);
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <voidProgramHalfWord+0x44>)
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <voidProgramHalfWord+0x44>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6113      	str	r3, [r2, #16]

  *(volatile uint16_t*)Copy_u32Address = Copy_u16Data;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	801a      	strh	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <voidProgramByte>:

static void voidProgramByte(uint32_t Copy_u32Address, uint8_t Copy_u8Data)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PSIZE_Msk << FLASH_CR_PSIZE_Pos));
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <voidProgramByte+0x40>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <voidProgramByte+0x40>)
 8001306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800130a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <voidProgramByte+0x40>)
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <voidProgramByte+0x40>)
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	6113      	str	r3, [r2, #16]
  FLASH->CR |= (FLASH_CR_PG_Msk << FLASH_CR_PG_Pos);
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <voidProgramByte+0x40>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <voidProgramByte+0x40>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6113      	str	r3, [r2, #16]

  *(volatile uint8_t*)Copy_u32Address = Copy_u8Data;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	78fa      	ldrb	r2, [r7, #3]
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <voidMassErase>:

static void voidMassErase(uint8_t Copy_u8VoltageRange, uint32_t Copy_u32Banks)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PSIZE_Msk << FLASH_CR_PSIZE_Pos));
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <voidMassErase+0x44>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4a0c      	ldr	r2, [pc, #48]	; (800137c <voidMassErase+0x44>)
 800134a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800134e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= (FLASH_CR_MER_Msk << FLASH_CR_MER_Pos);
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <voidMassErase+0x44>)
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <voidMassErase+0x44>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= (FLASH_CR_STRT_Msk << FLASH_CR_STRT_Pos) | ((uint32_t)Copy_u8VoltageRange << 8U);
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <voidMassErase+0x44>)
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	4313      	orrs	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <voidMassErase+0x44>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6113      	str	r3, [r2, #16]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00

08001380 <voidEraseSector>:

static void voidEraseSector(uint32_t Copy_u32Sector, uint8_t Copy_u8VoltageRange)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  uint32_t Local_p32Size = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]

  if (Copy_u8VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d102      	bne.n	800139c <voidEraseSector+0x1c>
  {
	  Local_p32Size = FLASH_PSIZE_BYTE;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	e010      	b.n	80013be <voidEraseSector+0x3e>
  }
  else if (Copy_u8VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d103      	bne.n	80013aa <voidEraseSector+0x2a>
  {
	  Local_p32Size = FLASH_PSIZE_HALF_WORD;
 80013a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e009      	b.n	80013be <voidEraseSector+0x3e>
  }
  else if (Copy_u8VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d103      	bne.n	80013b8 <voidEraseSector+0x38>
  {
	  Local_p32Size = FLASH_PSIZE_WORD;
 80013b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e002      	b.n	80013be <voidEraseSector+0x3e>
  }
  else
  {
	  Local_p32Size = FLASH_PSIZE_DOUBLE_WORD;
 80013b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013bc:	60fb      	str	r3, [r7, #12]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PSIZE_Msk << FLASH_CR_PSIZE_Pos));
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <voidEraseSector+0x8c>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <voidEraseSector+0x8c>)
 80013c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= Local_p32Size;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <voidEraseSector+0x8c>)
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	490f      	ldr	r1, [pc, #60]	; (800140c <voidEraseSector+0x8c>)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, (FLASH_CR_SNB_Msk << FLASH_CR_SNB_Pos));
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <voidEraseSector+0x8c>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	4a0c      	ldr	r2, [pc, #48]	; (800140c <voidEraseSector+0x8c>)
 80013dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013e0:	6113      	str	r3, [r2, #16]

  FLASH->CR |= (FLASH_CR_SER_Msk << FLASH_CR_SER_Pos) | (Copy_u32Sector << FLASH_CR_SNB_Pos);
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <voidEraseSector+0x8c>)
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <voidEraseSector+0x8c>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= (FLASH_CR_STRT_Msk << FLASH_CR_STRT_Pos);
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <voidEraseSector+0x8c>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	4a04      	ldr	r2, [pc, #16]	; (800140c <voidEraseSector+0x8c>)
 80013fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fe:	6113      	str	r3, [r2, #16]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40023c00 	.word	0x40023c00

08001410 <MGPIO_u8PinInit>:
 *
 *
 ******************************************************************************
 */
uint8_t MGPIO_u8PinInit ( const PinConfig_t* PinConfig )
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
	if ( PinConfig->Port <= PORTH && PinConfig->PinNum <= PIN15 && PinConfig->Mode <= ANALOG && PinConfig->OutputSpeed <= SPEED_HIGH && PinConfig-> OutputType <= OPEN_DRAIN && PinConfig-> PullType <= PULL_DOWEN && PinConfig-> AltFunc <= AF15 )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b07      	cmp	r3, #7
 8001422:	f200 8128 	bhi.w	8001676 <MGPIO_u8PinInit+0x266>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f200 8123 	bhi.w	8001676 <MGPIO_u8PinInit+0x266>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	2b03      	cmp	r3, #3
 8001436:	f200 811e 	bhi.w	8001676 <MGPIO_u8PinInit+0x266>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	78db      	ldrb	r3, [r3, #3]
 800143e:	2b03      	cmp	r3, #3
 8001440:	f200 8119 	bhi.w	8001676 <MGPIO_u8PinInit+0x266>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	2b01      	cmp	r3, #1
 800144a:	f200 8114 	bhi.w	8001676 <MGPIO_u8PinInit+0x266>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	2b02      	cmp	r3, #2
 8001454:	f200 810f 	bhi.w	8001676 <MGPIO_u8PinInit+0x266>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	799b      	ldrb	r3, [r3, #6]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	f200 810a 	bhi.w	8001676 <MGPIO_u8PinInit+0x266>
	{
		(GPIO_Ports[PinConfig->Port]->MODER) &=~ (MODER_MASK      << (PinConfig->PinNum) * MODE_PIN_ACCSESS );
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	4b88      	ldr	r3, [pc, #544]	; (800168c <MGPIO_u8PinInit+0x27c>)
 800146a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2103      	movs	r1, #3
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	4b81      	ldr	r3, [pc, #516]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001488:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800148c:	400a      	ands	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
	    (GPIO_Ports[PinConfig->Port]->MODER)|=   (PinConfig->Mode << (PinConfig->PinNum) * MODE_PIN_ACCSESS );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b7d      	ldr	r3, [pc, #500]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	789b      	ldrb	r3, [r3, #2]
 80014a2:	4619      	mov	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	4b75      	ldr	r3, [pc, #468]	; (800168c <MGPIO_u8PinInit+0x27c>)
 80014b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]

		(GPIO_Ports[PinConfig->Port]->PUPDR) &=~ (PUPDR_MASK          << (PinConfig->PinNum) * PUPDR_PIN_ACCSESS );
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b71      	ldr	r3, [pc, #452]	; (800168c <MGPIO_u8PinInit+0x27c>)
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2103      	movs	r1, #3
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	4619      	mov	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	4b69      	ldr	r3, [pc, #420]	; (800168c <MGPIO_u8PinInit+0x27c>)
 80014e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80014ea:	400a      	ands	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
	    (GPIO_Ports[PinConfig->Port]->PUPDR)|=   (PinConfig->PullType << (PinConfig->PinNum) * PUPDR_PIN_ACCSESS );
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b65      	ldr	r3, [pc, #404]	; (800168c <MGPIO_u8PinInit+0x27c>)
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	795b      	ldrb	r3, [r3, #5]
 8001500:	4619      	mov	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	4619      	mov	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	4b5d      	ldr	r3, [pc, #372]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001516:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800151a:	430a      	orrs	r2, r1
 800151c:	60da      	str	r2, [r3, #12]

	    if ( PinConfig->Mode == OUTPUT || PinConfig->Mode == ALTERNATE_FUNCTION )
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	789b      	ldrb	r3, [r3, #2]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d004      	beq.n	8001530 <MGPIO_u8PinInit+0x120>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	2b02      	cmp	r3, #2
 800152c:	f040 80a6 	bne.w	800167c <MGPIO_u8PinInit+0x26c>
	    {
			(GPIO_Ports[PinConfig->Port]->OTYPER) &=~ (OTYPER_MASK           << (PinConfig->PinNum) );
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b55      	ldr	r3, [pc, #340]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	4619      	mov	r1, r3
 8001544:	2301      	movs	r3, #1
 8001546:	408b      	lsls	r3, r1
 8001548:	43db      	mvns	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	4b4e      	ldr	r3, [pc, #312]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001554:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001558:	400a      	ands	r2, r1
 800155a:	605a      	str	r2, [r3, #4]
		    (GPIO_Ports[PinConfig->Port]->OTYPER)|=   (PinConfig->OutputType << (PinConfig->PinNum) );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b4a      	ldr	r3, [pc, #296]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	4619      	mov	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	4619      	mov	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	4b42      	ldr	r3, [pc, #264]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001582:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]

			(GPIO_Ports[PinConfig->Port]->OSPEEDR) &=~ (OSPEEDER_MASK           << (PinConfig->PinNum) * OSPEEDER_PIN_ACCSESS );
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4b3e      	ldr	r3, [pc, #248]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2103      	movs	r1, #3
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <MGPIO_u8PinInit+0x27c>)
 80015b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80015b4:	400a      	ands	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
			(GPIO_Ports[PinConfig->Port]->OSPEEDR)|=   (PinConfig->OutputSpeed  << (PinConfig->PinNum) * OSPEEDER_PIN_ACCSESS );
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <MGPIO_u8PinInit+0x27c>)
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	4619      	mov	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	4619      	mov	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <MGPIO_u8PinInit+0x27c>)
 80015e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]

			if ( PinConfig->Mode == ALTERNATE_FUNCTION )
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d145      	bne.n	800167c <MGPIO_u8PinInit+0x26c>
		    {
				uint8_t Local_u8Reg = ((PinConfig->PinNum) / AFR_PIN_SHIFTING);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	785b      	ldrb	r3, [r3, #1]
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	73bb      	strb	r3, [r7, #14]
				uint8_t Local_u8Bit = ((PinConfig->PinNum) % AFR_PIN_SHIFTING);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	737b      	strb	r3, [r7, #13]

				(GPIO_Ports[PinConfig->Port]->AFR[Local_u8Reg]) &=~ (AFR_MASK           << (Local_u8Bit) * AFR_PIN_ACCSESS );
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <MGPIO_u8PinInit+0x27c>)
 800160a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160e:	7bba      	ldrb	r2, [r7, #14]
 8001610:	3208      	adds	r2, #8
 8001612:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <MGPIO_u8PinInit+0x27c>)
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	7bba      	ldrb	r2, [r7, #14]
 8001632:	4001      	ands	r1, r0
 8001634:	3208      	adds	r2, #8
 8001636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				(GPIO_Ports[PinConfig->Port]->AFR[Local_u8Reg])|=   (PinConfig->AltFunc << (Local_u8Bit) * AFR_PIN_ACCSESS );
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	7bba      	ldrb	r2, [r7, #14]
 8001648:	3208      	adds	r2, #8
 800164a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	461a      	mov	r2, r3
 8001654:	7b7b      	ldrb	r3, [r7, #13]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	4618      	mov	r0, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <MGPIO_u8PinInit+0x27c>)
 8001666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166a:	7bba      	ldrb	r2, [r7, #14]
 800166c:	4301      	orrs	r1, r0
 800166e:	3208      	adds	r2, #8
 8001670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    if ( PinConfig->Mode == OUTPUT || PinConfig->Mode == ALTERNATE_FUNCTION )
 8001674:	e002      	b.n	800167c <MGPIO_u8PinInit+0x26c>
	    }

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001676:	2301      	movs	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e000      	b.n	800167e <MGPIO_u8PinInit+0x26e>
	    if ( PinConfig->Mode == OUTPUT || PinConfig->Mode == ALTERNATE_FUNCTION )
 800167c:	bf00      	nop
	}
	return Local_u8ErrorState;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	20000000 	.word	0x20000000

08001690 <MGPIO_u8GetPinValue>:
 *
 ******************************************************************************
 */

uint8_t  MGPIO_u8GetPinValue    ( Port_t Copy_PortID , Pin_t Copy_PinID , uint8_t *Copy_pu8Result )
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	603a      	str	r2, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	460b      	mov	r3, r1
 800169e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PortID <= PORTG && Copy_PinID <= PIN15 && Copy_pu8Result!=NULL )
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d814      	bhi.n	80016d4 <MGPIO_u8GetPinValue+0x44>
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d811      	bhi.n	80016d4 <MGPIO_u8GetPinValue+0x44>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00e      	beq.n	80016d4 <MGPIO_u8GetPinValue+0x44>
	{
		*Copy_pu8Result = ( (GPIO_Ports[Copy_PortID]->IDR >> Copy_PinID) & PIN_MASK );
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <MGPIO_u8GetPinValue+0x58>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	691a      	ldr	r2, [r3, #16]
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	fa22 f303 	lsr.w	r3, r2, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e001      	b.n	80016d8 <MGPIO_u8GetPinValue+0x48>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000000 	.word	0x20000000

080016ec <MGPTIMER_u8ClearInterruptFlags>:
 *
 *
 ******************************************************************************
 */
static uint8_t  MGPTIMER_u8ClearInterruptFlags( GPTIMERindex_t Copy_GPTIMERindex )
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
	if ( Copy_GPTIMERindex <= TMR_5 )
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d80c      	bhi.n	800171a <MGPTIMER_u8ClearInterruptFlags+0x2e>
	{
		GPTIMER_Index[Copy_GPTIMERindex] -> SR &=~ (GPTIMER_CCIF_MASK << GPTIMER_SR_CC1IF);
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <MGPTIMER_u8ClearInterruptFlags+0x40>)
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4907      	ldr	r1, [pc, #28]	; (800172c <MGPTIMER_u8ClearInterruptFlags+0x40>)
 800170e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001712:	f022 021e 	bic.w	r2, r2, #30
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	e001      	b.n	800171e <MGPTIMER_u8ClearInterruptFlags+0x32>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	20000020 	.word	0x20000020

08001730 <TIM2_IRQHandler>:

/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_2] != NULL )
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <TIM2_IRQHandler+0x1c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <TIM2_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_2);
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff ffd5 	bl	80016ec <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_2]();
 8001742:	4b02      	ldr	r3, [pc, #8]	; (800174c <TIM2_IRQHandler+0x1c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4798      	blx	r3
	}
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200000a8 	.word	0x200000a8

08001750 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_3] != NULL )
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <TIM3_IRQHandler+0x1c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <TIM3_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_3);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff ffc5 	bl	80016ec <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_3]();
 8001762:	4b02      	ldr	r3, [pc, #8]	; (800176c <TIM3_IRQHandler+0x1c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4798      	blx	r3
	}
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200000a8 	.word	0x200000a8

08001770 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_4] != NULL )
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <TIM4_IRQHandler+0x1c>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <TIM4_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_4);
 800177c:	2002      	movs	r0, #2
 800177e:	f7ff ffb5 	bl	80016ec <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_4]();
 8001782:	4b02      	ldr	r3, [pc, #8]	; (800178c <TIM4_IRQHandler+0x1c>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4798      	blx	r3
	}
}void TIM5_IRQHandler(void)
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200000a8 	.word	0x200000a8

08001790 <TIM5_IRQHandler>:
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	if (  GPTIMER_ApfCallBack[TMR_5] != NULL )
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <TIM5_IRQHandler+0x1c>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <TIM5_IRQHandler+0x18>
	{
		MGPTIMER_u8ClearInterruptFlags(TMR_5);
 800179c:	2003      	movs	r0, #3
 800179e:	f7ff ffa5 	bl	80016ec <MGPTIMER_u8ClearInterruptFlags>
		GPTIMER_ApfCallBack[TMR_5]();
 80017a2:	4b02      	ldr	r3, [pc, #8]	; (80017ac <TIM5_IRQHandler+0x1c>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4798      	blx	r3
	}
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200000a8 	.word	0x200000a8

080017b0 <SPRELOADER_voidSwitch>:
 *
 ******************************************************************************
 */

void SPRELOADER_voidSwitch ( void )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
	uint8_t Local_u8Btn ;
	MGPIO_u8GetPinValue(PRELOADER_BTN_PORT, PRELOADER_BTN_PIN , &Local_u8Btn);
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	461a      	mov	r2, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ff67 	bl	8001690 <MGPIO_u8GetPinValue>
	if (Local_u8Btn == PRELOADER_PRESSED_BTN_STATUS )
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <SPRELOADER_voidSwitch+0x1e>
	{
		voidGOToBootloader();
 80017c8:	f000 f810 	bl	80017ec <voidGOToBootloader>
	else
	{
		//voidJumpToUserApp(PRELOADER_USER_APP1_BASE_ADDRESS);
		voidJumpToUserApp_1();
	}
}
 80017cc:	e008      	b.n	80017e0 <SPRELOADER_voidSwitch+0x30>
	else if ( Local_u8AppIndexFlag == 2 )
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SPRELOADER_voidSwitch+0x38>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d102      	bne.n	80017dc <SPRELOADER_voidSwitch+0x2c>
		voidJumpToUserApp_2();
 80017d6:	f000 f8a9 	bl	800192c <voidJumpToUserApp_2>
}
 80017da:	e001      	b.n	80017e0 <SPRELOADER_voidSwitch+0x30>
		voidJumpToUserApp_1();
 80017dc:	f000 f88e 	bl	80018fc <voidJumpToUserApp_1>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000030 	.word	0x20000030

080017ec <voidGOToBootloader>:
/*************************************************************************************************************************************/
/********************************************************* Static Functions implementations ******************************************/
/*************************************************************************************************************************************/
static void  voidGOToBootloader( void )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0c0      	sub	sp, #256	; 0x100
 80017f0:	af00      	add	r7, sp, #0
	uint8_t Local_u8CmdPacket[255]={0};
 80017f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	3304      	adds	r3, #4
 8001800:	22fb      	movs	r2, #251	; 0xfb
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fedf 	bl	80025c8 <memset>
	while(1)
	{
		memset(Local_u8CmdPacket,0,255);
 800180a:	463b      	mov	r3, r7
 800180c:	22ff      	movs	r2, #255	; 0xff
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fed9 	bl	80025c8 <memset>
		/* 1- Length to Follow */
		MUSART_u8ReceiveArraySynch(PRELOADER_UART_INDEX , &Local_u8CmdPacket[0], 1);
 8001816:	463b      	mov	r3, r7
 8001818:	2201      	movs	r2, #1
 800181a:	4619      	mov	r1, r3
 800181c:	2000      	movs	r0, #0
 800181e:	f000 fd1b 	bl	8002258 <MUSART_u8ReceiveArraySynch>
		/* 2- Command */
		MUSART_u8ReceiveArraySynch(PRELOADER_UART_INDEX , &Local_u8CmdPacket[1], Local_u8CmdPacket[0] );
 8001822:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001826:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	463b      	mov	r3, r7
 800182e:	3301      	adds	r3, #1
 8001830:	4619      	mov	r1, r3
 8001832:	2000      	movs	r0, #0
 8001834:	f000 fd10 	bl	8002258 <MUSART_u8ReceiveArraySynch>
		/* 2- Decode Command */
		switch (Local_u8CmdPacket[1])
 8001838:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800183c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	3b51      	subs	r3, #81	; 0x51
 8001844:	2b0b      	cmp	r3, #11
 8001846:	d857      	bhi.n	80018f8 <voidGOToBootloader+0x10c>
 8001848:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <voidGOToBootloader+0x64>)
 800184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184e:	bf00      	nop
 8001850:	08001881 	.word	0x08001881
 8001854:	0800188b 	.word	0x0800188b
 8001858:	08001895 	.word	0x08001895
 800185c:	0800189f 	.word	0x0800189f
 8001860:	080018a9 	.word	0x080018a9
 8001864:	080018b3 	.word	0x080018b3
 8001868:	080018bd 	.word	0x080018bd
 800186c:	080018c7 	.word	0x080018c7
 8001870:	080018d1 	.word	0x080018d1
 8001874:	080018db 	.word	0x080018db
 8001878:	080018e5 	.word	0x080018e5
 800187c:	080018ef 	.word	0x080018ef
		{
		case BOOTLOADER_GET_VER                :      BOOTLOADER_voidHandleGetVerCmd            (Local_u8CmdPacket)    ; break ;
 8001880:	463b      	mov	r3, r7
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe34 	bl	80004f0 <BOOTLOADER_voidHandleGetVerCmd>
 8001888:	e037      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_GET_HELP               :      BOOTLOADER_voidHandleGetHelpCmd           (Local_u8CmdPacket)    ; break ;
 800188a:	463b      	mov	r3, r7
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe5d 	bl	800054c <BOOTLOADER_voidHandleGetHelpCmd>
 8001892:	e032      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_GET_CID                :      BOOTLOADER_voidHandleGetCIDCmd            (Local_u8CmdPacket)    ; break ;
 8001894:	463b      	mov	r3, r7
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe8c 	bl	80005b4 <BOOTLOADER_voidHandleGetCIDCmd>
 800189c:	e02d      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_GET_RDP_STATUS         :      BOOTLOADER_voidHandleGetRDPStatusCmd      (Local_u8CmdPacket)    ; break ;
 800189e:	463b      	mov	r3, r7
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe febd 	bl	8000620 <BOOTLOADER_voidHandleGetRDPStatusCmd>
 80018a6:	e028      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_GO_TO_ADDR             :      BOOTLOADER_voidHandleGotoAddressCmd       (Local_u8CmdPacket)    ; break ;
 80018a8:	463b      	mov	r3, r7
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe feec 	bl	8000688 <BOOTLOADER_voidHandleGotoAddressCmd>
 80018b0:	e023      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_FLASH_ERASE            :      BOOTLOADER_voidHandleFlashEraseCmd        (Local_u8CmdPacket)    ; break ;
 80018b2:	463b      	mov	r3, r7
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe ff27 	bl	8000708 <BOOTLOADER_voidHandleFlashEraseCmd>
 80018ba:	e01e      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_MEM_WRITE              :      BOOTLOADER_voidHandleMemWriteCmd          (Local_u8CmdPacket)    ; break ;
 80018bc:	463b      	mov	r3, r7
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe ff5a 	bl	8000778 <BOOTLOADER_voidHandleMemWriteCmd>
 80018c4:	e019      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_EN_R_W_PROTECT         :      BOOTLOADER_voidHandleEnableRWProtectCmd   (Local_u8CmdPacket)    ; break ;
 80018c6:	463b      	mov	r3, r7
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe ff9c 	bl	8000806 <BOOTLOADER_voidHandleEnableRWProtectCmd>
 80018ce:	e014      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_MEM_READ               :      BL_voidHandleMemReadCmd                   (Local_u8CmdPacket)    ; break ;
 80018d0:	463b      	mov	r3, r7
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f83a 	bl	800094c <BL_voidHandleMemReadCmd>
 80018d8:	e00f      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_READ_SECTOR_P_STATUS   :      BOOTLOADER_voidHandleReadSectorStatusCmd  (Local_u8CmdPacket)    ; break ;
 80018da:	463b      	mov	r3, r7
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f803 	bl	80008e8 <BOOTLOADER_voidHandleReadSectorStatusCmd>
 80018e2:	e00a      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_OTP_READ               :      BL_voidHandleOTPReadCmd                   (Local_u8CmdPacket)    ; break ;
 80018e4:	463b      	mov	r3, r7
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f855 	bl	8000996 <BL_voidHandleOTPReadCmd>
 80018ec:	e005      	b.n	80018fa <voidGOToBootloader+0x10e>
		case BOOTLOADER_DIS_R_W_PROTECT        :      BOOTLOADER_voidHandleDisableRWProtectCmd  (Local_u8CmdPacket)    ; break ;
 80018ee:	463b      	mov	r3, r7
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe ffc2 	bl	800087a <BOOTLOADER_voidHandleDisableRWProtectCmd>
 80018f6:	e000      	b.n	80018fa <voidGOToBootloader+0x10e>
		default                                :      /* invalid Command */                                              break ;
 80018f8:	bf00      	nop
		memset(Local_u8CmdPacket,0,255);
 80018fa:	e786      	b.n	800180a <voidGOToBootloader+0x1e>

080018fc <voidJumpToUserApp_1>:
	Local_pFunResetHandlar = (void *)Local_u8ResetHandlerAddress;
	Local_pFunResetHandlar();
}

static void  voidJumpToUserApp_1 ( void )
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
	void (* Local_pFunResetHandlar)(void);
	uint32_t Local_u8ResetHandlerAddress , Local_u32MSPVal ;

	Local_u32MSPVal = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS );
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <voidJumpToUserApp_1+0x28>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]
	__asm volatile("MSR MSP , %0"::"r"(Local_u32MSPVal));
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f383 8808 	msr	MSP, r3

	Local_u8ResetHandlerAddress  =  *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4) );
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <voidJumpToUserApp_1+0x2c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	60bb      	str	r3, [r7, #8]
	Local_pFunResetHandlar = (void *)Local_u8ResetHandlerAddress;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	607b      	str	r3, [r7, #4]
	Local_pFunResetHandlar();
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4798      	blx	r3
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	08008000 	.word	0x08008000
 8001928:	08008004 	.word	0x08008004

0800192c <voidJumpToUserApp_2>:
static void  voidJumpToUserApp_2 ( void )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
	void (* Local_pFunResetHandlar)(void);
	uint32_t Local_u8ResetHandlerAddress , Local_u32MSPVal ;

	Local_u32MSPVal = *((volatile uint32_t *)FLASH_SECTOR8_BASE_ADDRESS );
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <voidJumpToUserApp_2+0x28>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60fb      	str	r3, [r7, #12]
	__asm volatile("MSR MSP , %0"::"r"(Local_u32MSPVal));
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f383 8808 	msr	MSP, r3

	Local_u8ResetHandlerAddress  =  *((volatile uint32_t *)(FLASH_SECTOR8_BASE_ADDRESS + 4) );
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <voidJumpToUserApp_2+0x2c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60bb      	str	r3, [r7, #8]
	Local_pFunResetHandlar = (void *)Local_u8ResetHandlerAddress;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	607b      	str	r3, [r7, #4]
	Local_pFunResetHandlar();
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4798      	blx	r3
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	08080000 	.word	0x08080000
 8001958:	08080004 	.word	0x08080004

0800195c <MRCC_u8SetClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8SetClockState		(  ClockType_t       Copy_ClockType , ClockState_t Copy_ClockState )
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	460a      	mov	r2, r1
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	4613      	mov	r3, r2
 800196a:	71bb      	strb	r3, [r7, #6]
          uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	73fb      	strb	r3, [r7, #15]
          if ( Copy_ClockType <= PLLSAI  &&  Copy_ClockState <= ENABLE )
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b04      	cmp	r3, #4
 8001974:	f200 80ce 	bhi.w	8001b14 <MRCC_u8SetClockState+0x1b8>
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b01      	cmp	r3, #1
 800197c:	f200 80ca 	bhi.w	8001b14 <MRCC_u8SetClockState+0x1b8>
          {
    		  uint32_t Local_u32TimeOut = 0 ;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
              switch ( Copy_ClockType )
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b04      	cmp	r3, #4
 8001988:	f200 80b7 	bhi.w	8001afa <MRCC_u8SetClockState+0x19e>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <MRCC_u8SetClockState+0x38>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a9 	.word	0x080019a9
 8001998:	080019eb 	.word	0x080019eb
 800199c:	08001a2f 	.word	0x08001a2f
 80019a0:	08001a73 	.word	0x08001a73
 80019a4:	08001ab7 	.word	0x08001ab7
              {
              	  	  case HSI :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_HSION));
 80019a8:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5e      	ldr	r2, [pc, #376]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]
  	  	  	  	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_HSION));
 80019b4:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	79bb      	ldrb	r3, [r7, #6]
 80019ba:	495b      	ldr	r1, [pc, #364]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
  	  	  	  	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 80019c0:	e002      	b.n	80019c8 <MRCC_u8SetClockState+0x6c>
  	  	  	  	  	  	  	  	  {
  	  	  	  	  	  	  	  		  Local_u32TimeOut++;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
  	  	  	  	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 80019c8:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <MRCC_u8SetClockState+0x7e>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	4a55      	ldr	r2, [pc, #340]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d9f3      	bls.n	80019c2 <MRCC_u8SetClockState+0x66>
  	  	  	  	  	  	  	  	  }
  	  	  	  	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	f240 808e 	bls.w	8001b00 <MRCC_u8SetClockState+0x1a4>
  	  	  	  	  	  	  	  	  {
  	  	  	  	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
  	  	  	  	  	  	  	  	  }
  	  	  	  	  	  	  	  	  break;
 80019e8:	e08a      	b.n	8001b00 <MRCC_u8SetClockState+0x1a4>

              	  	  case HSE :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_HSEON));
 80019ea:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a4e      	ldr	r2, [pc, #312]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_HSEON));
 80019f6:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	79ba      	ldrb	r2, [r7, #6]
 80019fc:	0412      	lsls	r2, r2, #16
 80019fe:	4611      	mov	r1, r2
 8001a00:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a02:	430b      	orrs	r3, r1
 8001a04:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSERD) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001a06:	e002      	b.n	8001a0e <MRCC_u8SetClockState+0xb2>
              	  	  	  	  	  {
              	  	  	  	  		  	 Local_u32TimeOut++;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_HSERD) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001a0e:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0c5b      	lsrs	r3, r3, #17
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d103      	bne.n	8001a20 <MRCC_u8SetClockState+0xc4>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4a44      	ldr	r2, [pc, #272]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d9f3      	bls.n	8001a08 <MRCC_u8SetClockState+0xac>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4a42      	ldr	r2, [pc, #264]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d96d      	bls.n	8001b04 <MRCC_u8SetClockState+0x1a8>
              	  	  	  	  	  {
              	  	  	  	  		  	 Local_u8ErrorState = ERROR_STATE_NOK;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 8001a2c:	e06a      	b.n	8001b04 <MRCC_u8SetClockState+0x1a8>

              	  	  case PLL :  RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_PLLON));
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a38:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_PLLON));
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	79ba      	ldrb	r2, [r7, #6]
 8001a40:	0612      	lsls	r2, r2, #24
 8001a42:	4611      	mov	r1, r2
 8001a44:	4a38      	ldr	r2, [pc, #224]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a46:	430b      	orrs	r3, r1
 8001a48:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001a4a:	e002      	b.n	8001a52 <MRCC_u8SetClockState+0xf6>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u32TimeOut++;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e5b      	lsrs	r3, r3, #25
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <MRCC_u8SetClockState+0x108>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d9f3      	bls.n	8001a4c <MRCC_u8SetClockState+0xf0>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d94d      	bls.n	8001b08 <MRCC_u8SetClockState+0x1ac>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 8001a70:	e04a      	b.n	8001b08 <MRCC_u8SetClockState+0x1ac>
              	  	  case PLLI2S:RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_PLLI2SON));
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a2c      	ldr	r2, [pc, #176]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a7c:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_PLLI2SON));
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	79ba      	ldrb	r2, [r7, #6]
 8001a84:	0692      	lsls	r2, r2, #26
 8001a86:	4611      	mov	r1, r2
 8001a88:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLI2SRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001a8e:	e002      	b.n	8001a96 <MRCC_u8SetClockState+0x13a>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u32TimeOut++;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLI2SRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	0edb      	lsrs	r3, r3, #27
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d103      	bne.n	8001aa8 <MRCC_u8SetClockState+0x14c>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4a22      	ldr	r2, [pc, #136]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d9f3      	bls.n	8001a90 <MRCC_u8SetClockState+0x134>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d92d      	bls.n	8001b0c <MRCC_u8SetClockState+0x1b0>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 8001ab4:	e02a      	b.n	8001b0c <MRCC_u8SetClockState+0x1b0>
              	  	  case PLLSAI:RCC->CR &=~( RCC_CLOCK_STATE_MASK<<(RCC_CR_PLLSAION));
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1b      	ldr	r2, [pc, #108]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  RCC->CR |= (Copy_ClockState<<(RCC_CR_PLLSAION));
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	79ba      	ldrb	r2, [r7, #6]
 8001ac8:	0712      	lsls	r2, r2, #28
 8001aca:	4611      	mov	r1, r2
 8001acc:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6013      	str	r3, [r2, #0]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLSAIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001ad2:	e002      	b.n	8001ada <MRCC_u8SetClockState+0x17e>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u32TimeOut++;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
              	  	  	  	  	  while( (  RCC_CLK_NOT_RDY == (RCC->CR >> RCC_CR_PLLSAIRDY) & 0x1 ) && ( Local_u32TimeOut < RCC_TIME_OUT ) )
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <MRCC_u8SetClockState+0x1cc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0f5b      	lsrs	r3, r3, #29
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d103      	bne.n	8001aec <MRCC_u8SetClockState+0x190>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d9f3      	bls.n	8001ad4 <MRCC_u8SetClockState+0x178>
              	  	  	  	  	  }
              	  	  	  	  	  if( Local_u32TimeOut >= RCC_TIME_OUT )
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4a0f      	ldr	r2, [pc, #60]	; (8001b2c <MRCC_u8SetClockState+0x1d0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d90d      	bls.n	8001b10 <MRCC_u8SetClockState+0x1b4>
              	  	  	  	  	  {
              	  	  	  	  		  Local_u8ErrorState = ERROR_STATE_NOK;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  }
              	  	  	  	  	  break;
 8001af8:	e00a      	b.n	8001b10 <MRCC_u8SetClockState+0x1b4>
              	  	  default  :  Local_u8ErrorState = ERROR_STATE_NOK;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
              	  	  	  	  	  break;
 8001afe:	e008      	b.n	8001b12 <MRCC_u8SetClockState+0x1b6>
  	  	  	  	  	  	  	  	  break;
 8001b00:	bf00      	nop
 8001b02:	e009      	b.n	8001b18 <MRCC_u8SetClockState+0x1bc>
              	  	  	  	  	  break;
 8001b04:	bf00      	nop
 8001b06:	e007      	b.n	8001b18 <MRCC_u8SetClockState+0x1bc>
              	  	  	  	  	  break;
 8001b08:	bf00      	nop
 8001b0a:	e005      	b.n	8001b18 <MRCC_u8SetClockState+0x1bc>
              	  	  	  	  	  break;
 8001b0c:	bf00      	nop
 8001b0e:	e003      	b.n	8001b18 <MRCC_u8SetClockState+0x1bc>
              	  	  	  	  	  break;
 8001b10:	bf00      	nop
          {
 8001b12:	e001      	b.n	8001b18 <MRCC_u8SetClockState+0x1bc>
              }
          }
          else
          {
          	Local_u8ErrorState = ERROR_STATE_NOK;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
          }
          return Local_u8ErrorState;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	0001869f 	.word	0x0001869f

08001b30 <MRCC_u8SetSystemClock>:
 *                 @ClockType_t ( HSE OR HSI OR PLL )
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8SetSystemClock		(  ClockType_t       Copy_ClockType  )
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
          uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
          if ( Copy_ClockType <= PLL  )
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d80c      	bhi.n	8001b5e <MRCC_u8SetSystemClock+0x2e>
          {
        	  	  RCC->CFGR &=~( RCC_SYS_CLOCK_MASK<<(RCC_CFGR_SW));
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MRCC_u8SetSystemClock+0x40>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <MRCC_u8SetSystemClock+0x40>)
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	6093      	str	r3, [r2, #8]
	  	  	  	  RCC->CFGR |= ( Copy_ClockType<<(RCC_CFGR_SW));
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MRCC_u8SetSystemClock+0x40>)
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4906      	ldr	r1, [pc, #24]	; (8001b70 <MRCC_u8SetSystemClock+0x40>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]
 8001b5c:	e001      	b.n	8001b62 <MRCC_u8SetSystemClock+0x32>
          }
          else
          {
          	Local_u8ErrorState = ERROR_STATE_NOK;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
          }
          return Local_u8ErrorState;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40023800 	.word	0x40023800

08001b74 <MRCC_u8AHB1PeripheralsClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8AHB1PeripheralsClockState     (  AHB1peripherals_t  Copy_PerID , ClockState_t Copy_ClockState )
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	460a      	mov	r2, r1
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PerID <= PER_OTGHSULPI &&  Copy_ClockState <= ENABLE )
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b1e      	cmp	r3, #30
 8001b8c:	d818      	bhi.n	8001bc0 <MRCC_u8AHB1PeripheralsClockState+0x4c>
 8001b8e:	79bb      	ldrb	r3, [r7, #6]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d815      	bhi.n	8001bc0 <MRCC_u8AHB1PeripheralsClockState+0x4c>
	{
		RCC->AHB1ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MRCC_u8AHB1PeripheralsClockState+0x60>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	79fa      	ldrb	r2, [r7, #7]
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	43d2      	mvns	r2, r2
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <MRCC_u8AHB1PeripheralsClockState+0x60>)
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
		RCC->AHB1ENR |= (Copy_ClockState)<<(Copy_PerID);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MRCC_u8AHB1PeripheralsClockState+0x60>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	79b9      	ldrb	r1, [r7, #6]
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <MRCC_u8AHB1PeripheralsClockState+0x60>)
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	e001      	b.n	8001bc4 <MRCC_u8AHB1PeripheralsClockState+0x50>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <MRCC_u8APB2PeripheralsClockState>:
 *
 *
 ******************************************************************************
 */
uint8_t   MRCC_u8APB2PeripheralsClockState    (  APB2peripherals_t Copy_PerID , ClockState_t Copy_ClockState )
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	460a      	mov	r2, r1
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
	if ( Copy_PerID <= PER_LTDC &&  Copy_ClockState <= ENABLE )
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b1a      	cmp	r3, #26
 8001bf0:	d818      	bhi.n	8001c24 <MRCC_u8APB2PeripheralsClockState+0x4c>
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d815      	bhi.n	8001c24 <MRCC_u8APB2PeripheralsClockState+0x4c>
	{
		RCC->APB2ENR &=~( RCC_CLOCK_STATE_MASK<<(Copy_PerID));
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MRCC_u8APB2PeripheralsClockState+0x60>)
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	79fa      	ldrb	r2, [r7, #7]
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	43d2      	mvns	r2, r2
 8001c06:	4611      	mov	r1, r2
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <MRCC_u8APB2PeripheralsClockState+0x60>)
 8001c0a:	400b      	ands	r3, r1
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
		RCC->APB2ENR |= (Copy_ClockState)<<(Copy_PerID);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MRCC_u8APB2PeripheralsClockState+0x60>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	79b9      	ldrb	r1, [r7, #6]
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <MRCC_u8APB2PeripheralsClockState+0x60>)
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	e001      	b.n	8001c28 <MRCC_u8APB2PeripheralsClockState+0x50>
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <MSTK_u8ClockConfig>:
 *
 *
 ******************************************************************************
 */
uint8_t MSTK_u8ClockConfig              ( STKclock_t Copy_ClockType )
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState=ERROR_STATE_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
	if ( Copy_ClockType <= STK_AHB )
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d80e      	bhi.n	8001c6e <MSTK_u8ClockConfig+0x32>
	{
		STK->CTRL &=~(STK_CLKSOURCE_MASK << STK_CTRL_CLKSOURCE );
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MSTK_u8ClockConfig+0x44>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <MSTK_u8ClockConfig+0x44>)
 8001c56:	f023 0304 	bic.w	r3, r3, #4
 8001c5a:	6013      	str	r3, [r2, #0]
		STK->CTRL |= (Copy_ClockType << STK_CTRL_CLKSOURCE );
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MSTK_u8ClockConfig+0x44>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4611      	mov	r1, r2
 8001c66:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <MSTK_u8ClockConfig+0x44>)
 8001c68:	430b      	orrs	r3, r1
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e001      	b.n	8001c72 <MSTK_u8ClockConfig+0x36>
	}
	else
	{
		Local_u8ErrorState=ERROR_STATE_NOK;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]

}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <MSTK_voidStopTimer>:
 *
 *
 ******************************************************************************
 */
void   MSTK_voidStopTimer         ( void )
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	    STK->CTRL &=~(STK_STOP_TIMER_MASK << STK_CTRL_ENABLE );
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MSTK_voidStopTimer+0x28>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <MSTK_voidStopTimer+0x28>)
 8001c8e:	f023 0303 	bic.w	r3, r3, #3
 8001c92:	6013      	str	r3, [r2, #0]
		STK->LOAD = STK_RESET_COUNTER;
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <MSTK_voidStopTimer+0x28>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
		STK->VAL  = STK_RESET_COUNTER;
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <MSTK_voidStopTimer+0x28>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <SysTick_Handler>:
 *
 *
 ******************************************************************************
 */
void SysTick_Handler (void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
    if ( SysTick_CallBack != NULL)
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <SysTick_Handler+0x38>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d012      	beq.n	8001ce2 <SysTick_Handler+0x32>
    {
         if ( SINGLE == STK_u8IntervalType )
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <SysTick_Handler+0x3c>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <SysTick_Handler+0x20>
         {
        	 SysTick_CallBack();
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <SysTick_Handler+0x38>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4798      	blx	r3
        	 MSTK_voidStopTimer();
 8001cca:	f7ff ffdb 	bl	8001c84 <MSTK_voidStopTimer>
 8001cce:	e006      	b.n	8001cde <SysTick_Handler+0x2e>
         }
         else if ( PERIODIC == STK_u8IntervalType )
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <SysTick_Handler+0x3c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d102      	bne.n	8001cde <SysTick_Handler+0x2e>
         {
        	 SysTick_CallBack();
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <SysTick_Handler+0x38>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4798      	blx	r3
         }
         GET_BIT( STK->CTRL , STK_CTRL_COUNTFLAG ) ;
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SysTick_Handler+0x40>)
 8001ce0:	681b      	ldr	r3, [r3, #0]

    }

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200000b8 	.word	0x200000b8
 8001cec:	20000031 	.word	0x20000031
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <MUSART_u8SetConfiguration>:
 *
 *
 ******************************************************************************
 */
uint8_t MUSART_u8SetConfiguration ( const USARTconfig_t* USARTconfig )
{
 8001cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf8:	b088      	sub	sp, #32
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	77fb      	strb	r3, [r7, #31]
	if (  USARTconfig !=NULL )
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 8227 	beq.w	8002158 <MUSART_u8SetConfiguration+0x464>
	{
		/*************************************************************************************************************************************/
		/********************************************** Clear Flags ********************************************************************/
		MUSART_voidClearFlags(USARTconfig->USARTindex) ;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fb2e 	bl	8002370 <MUSART_voidClearFlags>
		/********************************************** Configuration ******************************************************************/
		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RE_MASK << (USART_CR1_RE));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4ba8      	ldr	r3, [pc, #672]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	4ba4      	ldr	r3, [pc, #656]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d2e:	f022 0204 	bic.w	r2, r2, #4
 8001d32:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Receiver << (USART_CR1_RE));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4ba0      	ldr	r3, [pc, #640]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4b9a      	ldr	r3, [pc, #616]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TE_MASK << (USART_CR1_TE));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b96      	ldr	r3, [pc, #600]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4b93      	ldr	r3, [pc, #588]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->Transmitter << (USART_CR1_TE));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b8e      	ldr	r3, [pc, #568]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	789b      	ldrb	r3, [r3, #2]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001d98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_RXNEIE_MASK << (USART_CR1_RXNEIE));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b85      	ldr	r3, [pc, #532]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001db6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dba:	f022 0220 	bic.w	r2, r2, #32
 8001dbe:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->RXNEinterrupt << (USART_CR1_RXNEIE));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	78db      	ldrb	r3, [r3, #3]
 8001dd2:	015b      	lsls	r3, r3, #5
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001dde:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TCIE_MASK << (USART_CR1_TCIE));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001dfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e04:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TransmetCompleteInterrupt << (USART_CR1_TCIE));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	791b      	ldrb	r3, [r3, #4]
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e24:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_TXEIE_MASK << (USART_CR1_TXEIE));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4b5e      	ldr	r3, [pc, #376]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e4a:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->TXEinterrupt << (USART_CR1_TXEIE));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b5a      	ldr	r3, [pc, #360]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	795b      	ldrb	r3, [r3, #5]
 8001e5e:	01db      	lsls	r3, r3, #7
 8001e60:	4619      	mov	r1, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	4b54      	ldr	r3, [pc, #336]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PS_MASK << (USART_CR1_PS));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	4b4d      	ldr	r3, [pc, #308]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e90:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParitySelection << (USART_CR1_PS));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	799b      	ldrb	r3, [r3, #6]
 8001ea4:	025b      	lsls	r3, r3, #9
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001eb0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_PCE_MASK << (USART_CR1_PCE));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001ece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed6:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->ParityControl << (USART_CR1_PCE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	79db      	ldrb	r3, [r3, #7]
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	4619      	mov	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001ef6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]


		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_M_MASK << (USART_CR1_M));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f1c:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->WordLength << (USART_CR1_M));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7a1b      	ldrb	r3, [r3, #8]
 8001f30:	031b      	lsls	r3, r3, #12
 8001f32:	4619      	mov	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR1 &=~ (USART_OVER8_MASK << (USART_CR1_OVER8));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f62:	60da      	str	r2, [r3, #12]
		USART_Index[USARTconfig->USARTindex] -> CR1 |=  (USARTconfig->OverSampling << (USART_CR1_OVER8));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7a5b      	ldrb	r3, [r3, #9]
 8001f76:	03db      	lsls	r3, r3, #15
 8001f78:	4619      	mov	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	60da      	str	r2, [r3, #12]

		USART_Index[USARTconfig->USARTindex] -> CR2 &=~ (USART_STOP_MASK << (USART_CR2_STOP));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001fa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fa4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001fa8:	611a      	str	r2, [r3, #16]
		USART_Index[USARTconfig->USARTindex] -> CR2 |=  (USARTconfig->StopBit_t << (USART_CR2_STOP));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <MUSART_u8SetConfiguration+0x2c8>)
 8001fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	e002      	b.n	8001fc0 <MUSART_u8SetConfiguration+0x2cc>
 8001fba:	bf00      	nop
 8001fbc:	20000034 	.word	0x20000034
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7a9b      	ldrb	r3, [r3, #10]
 8001fc4:	031b      	lsls	r3, r3, #12
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	4b66      	ldr	r3, [pc, #408]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8001fd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	611a      	str	r2, [r3, #16]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_EIE_MASK << (USART_CR3_EIE));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b62      	ldr	r3, [pc, #392]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8001fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4619      	mov	r1, r3
 8001fec:	4b5e      	ldr	r3, [pc, #376]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8001fee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->ErrorTnterrupt << (USART_CR3_EIE));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7adb      	ldrb	r3, [r3, #11]
 800200a:	4619      	mov	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	4b55      	ldr	r3, [pc, #340]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8002014:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002018:	430a      	orrs	r2, r1
 800201a:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAR_MASK << (USART_CR3_DMAR));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b51      	ldr	r3, [pc, #324]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8002024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	4619      	mov	r1, r3
 8002030:	4b4d      	ldr	r3, [pc, #308]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8002032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203a:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAresevier << (USART_CR3_DMAR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b49      	ldr	r3, [pc, #292]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8002044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7b1b      	ldrb	r3, [r3, #12]
 800204e:	019b      	lsls	r3, r3, #6
 8002050:	4619      	mov	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 800205a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800205e:	430a      	orrs	r2, r1
 8002060:	615a      	str	r2, [r3, #20]

		USART_Index[USARTconfig->USARTindex] -> CR3 &=~ (USART_DMAT_MASK << (USART_CR3_EIE));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	4b3f      	ldr	r3, [pc, #252]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 8002078:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	615a      	str	r2, [r3, #20]
		USART_Index[USARTconfig->USARTindex] -> CR3 |=  (USARTconfig->DMAtransmitter << (USART_CR3_DMAT));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 800208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7b5b      	ldrb	r3, [r3, #13]
 8002094:	01db      	lsls	r3, r3, #7
 8002096:	4619      	mov	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 80020a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	615a      	str	r2, [r3, #20]
		/********************************************** Baud Rate ************************************************************************/
		uint8_t Local_u8OverSampling ;
		if (USARTconfig->OverSampling == BY_8 )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7a5b      	ldrb	r3, [r3, #9]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d102      	bne.n	80020b6 <MUSART_u8SetConfiguration+0x3c2>
		{
			Local_u8OverSampling=8;
 80020b0:	2308      	movs	r3, #8
 80020b2:	77bb      	strb	r3, [r7, #30]
 80020b4:	e001      	b.n	80020ba <MUSART_u8SetConfiguration+0x3c6>
		}
		else
		{
			Local_u8OverSampling=16;
 80020b6:	2310      	movs	r3, #16
 80020b8:	77bb      	strb	r3, [r7, #30]
		}
		uint64_t Local_u64Mantissa = ( F_COLCK ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE ) ;
 80020ba:	7fbb      	ldrb	r3, [r7, #30]
 80020bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	4a29      	ldr	r2, [pc, #164]	; (800216c <MUSART_u8SetConfiguration+0x478>)
 80020c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ca:	2200      	movs	r2, #0
 80020cc:	469a      	mov	sl, r3
 80020ce:	4693      	mov	fp, r2
 80020d0:	e9c7 ab04 	strd	sl, fp, [r7, #16]
		uint64_t Local_u64Fraction = ( ( ( F_COLCK * 100 ) / ( (Local_u8OverSampling) * USART1_BAUD_RATE )  ) % 100 ) * (Local_u8OverSampling) ;
 80020d4:	7fbb      	ldrb	r3, [r7, #30]
 80020d6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	4a24      	ldr	r2, [pc, #144]	; (8002170 <MUSART_u8SetConfiguration+0x47c>)
 80020e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <MUSART_u8SetConfiguration+0x480>)
 80020e6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2164      	movs	r1, #100	; 0x64
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	7fba      	ldrb	r2, [r7, #30]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	2200      	movs	r2, #0
 80020fc:	4698      	mov	r8, r3
 80020fe:	4691      	mov	r9, r2
 8002100:	e9c7 8902 	strd	r8, r9, [r7, #8]

		if( Local_u64Fraction > USART_MAX_FRAC )
 8002104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002108:	f240 51dd 	movw	r1, #1501	; 0x5dd
 800210c:	428a      	cmp	r2, r1
 800210e:	f173 0300 	sbcs.w	r3, r3, #0
 8002112:	d30c      	bcc.n	800212e <MUSART_u8SetConfiguration+0x43a>
		{
			Local_u64Mantissa += USART_MANTISSA ;
 8002114:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002118:	1c54      	adds	r4, r2, #1
 800211a:	f143 0500 	adc.w	r5, r3, #0
 800211e:	e9c7 4504 	strd	r4, r5, [r7, #16]
			Local_u64Fraction  = USART_FRACTION ;
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		}
		USART_Index[USARTconfig->USARTindex] -> BRR = ( Local_u64Mantissa << USART_BAUD_RATE_ACCESS  ) | ( Local_u64Fraction / 100 ) ;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	011c      	lsls	r4, r3, #4
 8002132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002136:	f04f 0264 	mov.w	r2, #100	; 0x64
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	f7fe f855 	bl	80001ec <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4619      	mov	r1, r3
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MUSART_u8SetConfiguration+0x474>)
 800214e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002152:	4322      	orrs	r2, r4
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	e001      	b.n	800215c <MUSART_u8SetConfiguration+0x468>
		/********************************************** Enable ***************************************************************************/
		/*************************************************************************************************************************************/
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK;
 8002158:	2301      	movs	r3, #1
 800215a:	77fb      	strb	r3, [r7, #31]
	}
	return Local_u8ErrorState ;
 800215c:	7ffb      	ldrb	r3, [r7, #31]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3720      	adds	r7, #32
 8002162:	46bd      	mov	sp, r7
 8002164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002168:	20000034 	.word	0x20000034
 800216c:	00f42400 	.word	0x00f42400
 8002170:	5f5e1000 	.word	0x5f5e1000
 8002174:	51eb851f 	.word	0x51eb851f

08002178 <MUSART_u8UsartStatus>:
 *
 *
 ******************************************************************************
 */
uint8_t MUSART_u8UsartStatus ( USARTindex_t Copy_USARTindex , UsartStatus_t Copy_UsartStatus )
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	460a      	mov	r2, r1
 8002182:	71fb      	strb	r3, [r7, #7]
 8002184:	4613      	mov	r3, r2
 8002186:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
	if (  1  )
	{
		USART_Index[Copy_USARTindex] -> CR1 &=~ (USART_USART_MASK   << (USART_CR1_UE));
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <MUSART_u8UsartStatus+0x58>)
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	490d      	ldr	r1, [pc, #52]	; (80021d0 <MUSART_u8UsartStatus+0x58>)
 800219a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800219e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a2:	60da      	str	r2, [r3, #12]
		USART_Index[Copy_USARTindex] -> CR1 |=  (Copy_UsartStatus   << (USART_CR1_UE));
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <MUSART_u8UsartStatus+0x58>)
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	79bb      	ldrb	r3, [r7, #6]
 80021b0:	035b      	lsls	r3, r3, #13
 80021b2:	4618      	mov	r0, r3
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	4906      	ldr	r1, [pc, #24]	; (80021d0 <MUSART_u8UsartStatus+0x58>)
 80021b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021bc:	4302      	orrs	r2, r0
 80021be:	60da      	str	r2, [r3, #12]
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000034 	.word	0x20000034

080021d4 <MUSART_u8ReceiveCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataChar  )
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataChar != NULL )
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d02b      	beq.n	8002242 <MUSART_u8ReceiveCharSynch+0x6e>
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <MUSART_u8ReceiveCharSynch+0x80>)
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4917      	ldr	r1, [pc, #92]	; (8002254 <MUSART_u8ReceiveCharSynch+0x80>)
 80021f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021fc:	f022 0220 	bic.w	r2, r2, #32
 8002200:	601a      	str	r2, [r3, #0]
	    while ( USART_SR_RXNE_DOWN_MASK == GET_BIT ( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE ) )  ;
 8002202:	bf00      	nop
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <MUSART_u8ReceiveCharSynch+0x80>)
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f5      	beq.n	8002204 <MUSART_u8ReceiveCharSynch+0x30>
	    *Copy_pu8DataChar = ( USART_Index[Copy_USARTindex] -> DR )  ;
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <MUSART_u8ReceiveCharSynch+0x80>)
 800221c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	701a      	strb	r2, [r3, #0]
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_RXNE );
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <MUSART_u8ReceiveCharSynch+0x80>)
 800222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <MUSART_u8ReceiveCharSynch+0x80>)
 8002236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800223a:	f022 0220 	bic.w	r2, r2, #32
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e001      	b.n	8002246 <MUSART_u8ReceiveCharSynch+0x72>

	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002242:	2301      	movs	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	20000034 	.word	0x20000034

08002258 <MUSART_u8ReceiveArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8ReceiveArraySynch  (  USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray  , uint8_t Copy_u8Size  )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <MUSART_u8ReceiveArraySynch+0x40>
	{
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8002272:	2300      	movs	r3, #0
 8002274:	73bb      	strb	r3, [r7, #14]
 8002276:	e00a      	b.n	800228e <MUSART_u8ReceiveArraySynch+0x36>
	   {
    	   MUSART_u8ReceiveCharSynch( Copy_USARTindex , & (Copy_pu8DataArray[Local_u8Counter]) );
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	441a      	add	r2, r3
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ffa6 	bl	80021d4 <MUSART_u8ReceiveCharSynch>
	   for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8002288:	7bbb      	ldrb	r3, [r7, #14]
 800228a:	3301      	adds	r3, #1
 800228c:	73bb      	strb	r3, [r7, #14]
 800228e:	7bba      	ldrb	r2, [r7, #14]
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	429a      	cmp	r2, r3
 8002294:	d3f0      	bcc.n	8002278 <MUSART_u8ReceiveArraySynch+0x20>
 8002296:	e001      	b.n	800229c <MUSART_u8ReceiveArraySynch+0x44>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 800229c:	7bfb      	ldrb	r3, [r7, #15]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <MUSART_u8TransmitCharSynch>:
 *
 *
 ******************************************************************************
 */
uint8_t  MUSART_u8TransmitCharSynch     ( USARTindex_t Copy_USARTindex , uint8_t  Copy_u8DataChar  )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	460a      	mov	r2, r1
 80022b2:	71fb      	strb	r3, [r7, #7]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
	if ( 1 )
	{
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4a17      	ldr	r2, [pc, #92]	; (800231c <MUSART_u8TransmitCharSynch+0x74>)
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	4914      	ldr	r1, [pc, #80]	; (800231c <MUSART_u8TransmitCharSynch+0x74>)
 80022ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d2:	601a      	str	r2, [r3, #0]
		USART_Index[Copy_USARTindex] -> DR = Copy_u8DataChar ;
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	4a11      	ldr	r2, [pc, #68]	; (800231c <MUSART_u8TransmitCharSynch+0x74>)
 80022d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022dc:	79ba      	ldrb	r2, [r7, #6]
 80022de:	605a      	str	r2, [r3, #4]
		while ( USART_SR_TC_MASK == GET_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC ) )  ;
 80022e0:	bf00      	nop
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <MUSART_u8TransmitCharSynch+0x74>)
 80022e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f5      	beq.n	80022e2 <MUSART_u8TransmitCharSynch+0x3a>
		CLR_BIT( USART_Index[Copy_USARTindex] -> SR , USART_SR_TC );
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	4a08      	ldr	r2, [pc, #32]	; (800231c <MUSART_u8TransmitCharSynch+0x74>)
 80022fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4906      	ldr	r1, [pc, #24]	; (800231c <MUSART_u8TransmitCharSynch+0x74>)
 8002304:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800230c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
	}
	return Local_u8ErrorState ;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	20000034 	.word	0x20000034

08002320 <MUSART_u8TransmitArraySynch>:
 *
 *
 ******************************************************************************
 */
uint8_t   MUSART_u8TransmitArraySynch  ( USARTindex_t Copy_USARTindex , uint8_t * Copy_pu8DataArray , uint8_t Copy_u8Size )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
 800232c:	4613      	mov	r3, r2
 800232e:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = ERROR_STATE_OK ;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
	if ( Copy_pu8DataArray != NULL )
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d013      	beq.n	8002362 <MUSART_u8TransmitArraySynch+0x42>
	{
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 800233a:	2300      	movs	r3, #0
 800233c:	73bb      	strb	r3, [r7, #14]
 800233e:	e00b      	b.n	8002358 <MUSART_u8TransmitArraySynch+0x38>
	   {
    	   MUSART_u8TransmitCharSynch( Copy_USARTindex , Copy_pu8DataArray[Local_u8Counter]  );
 8002340:	7bbb      	ldrb	r3, [r7, #14]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ffab 	bl	80022a8 <MUSART_u8TransmitCharSynch>
       for (uint8_t Local_u8Counter = 0 ; Local_u8Counter < Copy_u8Size ; Local_u8Counter++ )
 8002352:	7bbb      	ldrb	r3, [r7, #14]
 8002354:	3301      	adds	r3, #1
 8002356:	73bb      	strb	r3, [r7, #14]
 8002358:	7bba      	ldrb	r2, [r7, #14]
 800235a:	79bb      	ldrb	r3, [r7, #6]
 800235c:	429a      	cmp	r2, r3
 800235e:	d3ef      	bcc.n	8002340 <MUSART_u8TransmitArraySynch+0x20>
 8002360:	e001      	b.n	8002366 <MUSART_u8TransmitArraySynch+0x46>
	   }
	}
	else
	{
		Local_u8ErrorState = ERROR_STATE_NOK ;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState ;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <MUSART_voidClearFlags>:
 *
 *
 ******************************************************************************
 */
void   MUSART_voidClearFlags( USARTindex_t Copy_USARTindex )
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
	USART_Index[Copy_USARTindex] -> SR = USART_SR_MASK ;
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	4a05      	ldr	r2, [pc, #20]	; (8002394 <MUSART_voidClearFlags+0x24>)
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000034 	.word	0x20000034

08002398 <USART1_IRQHandler>:

/*************************************************************************************************************************************/
/********************************************************* Handlers implementations **************************************************/
/*************************************************************************************************************************************/
void USART1_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_1] != NULL )
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <USART1_IRQHandler+0x28>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <USART1_IRQHandler+0x22>
	{
		MUSART_voidClearFlags(USART_1);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff ffe3 	bl	8002370 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_1](USART_Index[USART_1] -> DR);
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <USART1_IRQHandler+0x28>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <USART1_IRQHandler+0x2c>)
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	6852      	ldr	r2, [r2, #4]
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	4610      	mov	r0, r2
 80023b8:	4798      	blx	r3
	}

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200000bc 	.word	0x200000bc
 80023c4:	20000034 	.word	0x20000034

080023c8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_2] != NULL )
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <USART2_IRQHandler+0x28>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <USART2_IRQHandler+0x22>
	{
		MUSART_voidClearFlags(USART_2);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7ff ffcb 	bl	8002370 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_2](USART_Index[USART_2] -> DR);
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <USART2_IRQHandler+0x28>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <USART2_IRQHandler+0x2c>)
 80023e0:	6852      	ldr	r2, [r2, #4]
 80023e2:	6852      	ldr	r2, [r2, #4]
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	4610      	mov	r0, r2
 80023e8:	4798      	blx	r3
	}

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200000bc 	.word	0x200000bc
 80023f4:	20000034 	.word	0x20000034

080023f8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	if (  USART_ApfCallBack[USART_3] != NULL )
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <USART3_IRQHandler+0x28>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <USART3_IRQHandler+0x22>
	{
		MUSART_voidClearFlags(USART_3);
 8002404:	2002      	movs	r0, #2
 8002406:	f7ff ffb3 	bl	8002370 <MUSART_voidClearFlags>
		USART_ApfCallBack[USART_3](USART_Index[USART_3] -> DR);
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <USART3_IRQHandler+0x28>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <USART3_IRQHandler+0x2c>)
 8002410:	6892      	ldr	r2, [r2, #8]
 8002412:	6852      	ldr	r2, [r2, #4]
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	4610      	mov	r0, r2
 8002418:	4798      	blx	r3
	}

}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200000bc 	.word	0x200000bc
 8002424:	20000034 	.word	0x20000034

08002428 <main>:
/********************************************************************************************************************************************/
/**************************************************** Main Function  ************************************************************************/
/********************************************************************************************************************************************/

int main(void)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b08f      	sub	sp, #60	; 0x3c
 800242c:	af00      	add	r7, sp, #0
	/********************************************************************************************************************************************/

	/********************************************************************************************************************************************/
	/**************************************************** CORE Configurations *******************************************************************/
	/********************************************************************************************************************************************/
	MSTK_u8ClockConfig(STK_AHB_DIV_8);
 800242e:	2000      	movs	r0, #0
 8002430:	f7ff fc04 	bl	8001c3c <MSTK_u8ClockConfig>
	/********************************************************************************************************************************************/
	/**************************************************** RCC Configurations ********************************************************************/
	/********************************************************************************************************************************************/

	/********************************************************************************************************************************************/
	MRCC_u8SetClockState(HSI,ENABLE);
 8002434:	2101      	movs	r1, #1
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff fa90 	bl	800195c <MRCC_u8SetClockState>
	MRCC_u8SetSystemClock(HSI);
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fb77 	bl	8001b30 <MRCC_u8SetSystemClock>
	MRCC_u8AHB1PeripheralsClockState(PER_GPIOA,ENABLE);
 8002442:	2101      	movs	r1, #1
 8002444:	2000      	movs	r0, #0
 8002446:	f7ff fb95 	bl	8001b74 <MRCC_u8AHB1PeripheralsClockState>
	MRCC_u8AHB1PeripheralsClockState(PER_GPIOG,ENABLE);
 800244a:	2101      	movs	r1, #1
 800244c:	2006      	movs	r0, #6
 800244e:	f7ff fb91 	bl	8001b74 <MRCC_u8AHB1PeripheralsClockState>
	MRCC_u8APB2PeripheralsClockState(PER_USART1,ENABLE);
 8002452:	2101      	movs	r1, #1
 8002454:	2004      	movs	r0, #4
 8002456:	f7ff fbbf 	bl	8001bd8 <MRCC_u8APB2PeripheralsClockState>
	MRCC_u8AHB1PeripheralsClockState(PER_CRC,ENABLE);
 800245a:	2101      	movs	r1, #1
 800245c:	200c      	movs	r0, #12
 800245e:	f7ff fb89 	bl	8001b74 <MRCC_u8AHB1PeripheralsClockState>
	/********************************************************************************************************************************************/
	/**************************************************** MCAL Configurations *******************************************************************/
	/********************************************************************************************************************************************/

    /****************************************************************************************************************/
	PinConfig_t DISCOVERY_led1 = {PORTG, PIN13 ,OUTPUT,SPEED_LOW,PUSH_PULL,NO_PULL,AF0};
 8002462:	4a2d      	ldr	r2, [pc, #180]	; (8002518 <main+0xf0>)
 8002464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002468:	e892 0003 	ldmia.w	r2, {r0, r1}
 800246c:	6018      	str	r0, [r3, #0]
 800246e:	3304      	adds	r3, #4
 8002470:	8019      	strh	r1, [r3, #0]
 8002472:	3302      	adds	r3, #2
 8002474:	0c0a      	lsrs	r2, r1, #16
 8002476:	701a      	strb	r2, [r3, #0]
	MGPIO_u8PinInit(&DISCOVERY_led1);
 8002478:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe ffc7 	bl	8001410 <MGPIO_u8PinInit>
	PinConfig_t DISCOVERY_led2 = {PORTG, PIN14 ,OUTPUT,SPEED_LOW,PUSH_PULL,NO_PULL,AF0};
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <main+0xf4>)
 8002484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800248c:	6018      	str	r0, [r3, #0]
 800248e:	3304      	adds	r3, #4
 8002490:	8019      	strh	r1, [r3, #0]
 8002492:	3302      	adds	r3, #2
 8002494:	0c0a      	lsrs	r2, r1, #16
 8002496:	701a      	strb	r2, [r3, #0]
	MGPIO_u8PinInit(&DISCOVERY_led2);
 8002498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ffb7 	bl	8001410 <MGPIO_u8PinInit>
	PinConfig_t DISCOVERY_btn =  {PORTA, PIN0  ,INPUT ,SPEED_LOW,PUSH_PULL,NO_PULL,AF0};
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	f8c3 2003 	str.w	r2, [r3, #3]
	MGPIO_u8PinInit(&DISCOVERY_btn);
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe ffac 	bl	8001410 <MGPIO_u8PinInit>
    /****************************************************************************************************************/
	PinConfig_t UART1_PIN1 ={PORTA , PIN9  , ALTERNATE_FUNCTION , SPEED_LOW , PUSH_PULL , NO_PULL , AF7};
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <main+0xf8>)
 80024ba:	f107 0318 	add.w	r3, r7, #24
 80024be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024c2:	6018      	str	r0, [r3, #0]
 80024c4:	3304      	adds	r3, #4
 80024c6:	8019      	strh	r1, [r3, #0]
 80024c8:	3302      	adds	r3, #2
 80024ca:	0c0a      	lsrs	r2, r1, #16
 80024cc:	701a      	strb	r2, [r3, #0]
	MGPIO_u8PinInit(&UART1_PIN1);
 80024ce:	f107 0318 	add.w	r3, r7, #24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe ff9c 	bl	8001410 <MGPIO_u8PinInit>
	PinConfig_t UART1_PIN2 ={PORTA , PIN10 , ALTERNATE_FUNCTION , SPEED_LOW , PUSH_PULL , NO_PULL , AF7};
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <main+0xfc>)
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e2:	6018      	str	r0, [r3, #0]
 80024e4:	3304      	adds	r3, #4
 80024e6:	8019      	strh	r1, [r3, #0]
 80024e8:	3302      	adds	r3, #2
 80024ea:	0c0a      	lsrs	r2, r1, #16
 80024ec:	701a      	strb	r2, [r3, #0]
	MGPIO_u8PinInit(&UART1_PIN2);
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe ff8c 	bl	8001410 <MGPIO_u8PinInit>
	USARTconfig_t UART1 = {USART_1,RECEIVER_ENABLE,TRANSMITTER_ENABLE,RXNE_INTERRUPT_DISABLE
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <main+0x100>)
 80024fa:	463c      	mov	r4, r7
 80024fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fe:	c407      	stmia	r4!, {r0, r1, r2}
 8002500:	8023      	strh	r3, [r4, #0]
						  ,TRANSMITTER_COMPLETE_INTERRUPT_DISABLE,TXE_INTERRUPT_DISABLE
						  ,PARITY_SELECTION_EVEN,PARITY_CONTROL_DISABLE,DATA_8_BITS,BY_16,ONE_BIT
						  ,INHIBITED,DMAR_DISABLE,DMAT_DISABLE};
	MUSART_u8SetConfiguration(&UART1);
 8002502:	463b      	mov	r3, r7
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fbf5 	bl	8001cf4 <MUSART_u8SetConfiguration>
	MUSART_u8UsartStatus(USART_1, USART_ENABLE);
 800250a:	2101      	movs	r1, #1
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff fe33 	bl	8002178 <MUSART_u8UsartStatus>
	/********************************************************************************************************************************************/

	/********************************************************************************************************************************************/
	/**************************************************** SERVIES Configurations ****************************************************************/
	/********************************************************************************************************************************************/
	SPRELOADER_voidSwitch();
 8002512:	f7ff f94d 	bl	80017b0 <SPRELOADER_voidSwitch>
	/********************************************************************************************************************************************/
	/**************************************************** Loop **********************************************************************************/
	/********************************************************************************************************************************************/


	while (1)
 8002516:	e7fe      	b.n	8002516 <main+0xee>
 8002518:	080025fc 	.word	0x080025fc
 800251c:	08002604 	.word	0x08002604
 8002520:	0800260c 	.word	0x0800260c
 8002524:	08002614 	.word	0x08002614
 8002528:	0800261c 	.word	0x0800261c

0800252c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800252e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002534:	480c      	ldr	r0, [pc, #48]	; (8002568 <LoopForever+0x6>)
  ldr r1, =_edata
 8002536:	490d      	ldr	r1, [pc, #52]	; (800256c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002538:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <LoopForever+0xe>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <LoopForever+0x16>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800255a:	f000 f811 	bl	8002580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800255e:	f7ff ff63 	bl	8002428 <main>

08002562 <LoopForever>:

LoopForever:
  b LoopForever
 8002562:	e7fe      	b.n	8002562 <LoopForever>
  ldr   r0, =_estack
 8002564:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800256c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002570:	0800263c 	.word	0x0800263c
  ldr r2, =_sbss
 8002574:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8002578:	200000d4 	.word	0x200000d4

0800257c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800257c:	e7fe      	b.n	800257c <ADC_IRQHandler>
	...

08002580 <__libc_init_array>:
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	4d0d      	ldr	r5, [pc, #52]	; (80025b8 <__libc_init_array+0x38>)
 8002584:	4c0d      	ldr	r4, [pc, #52]	; (80025bc <__libc_init_array+0x3c>)
 8002586:	1b64      	subs	r4, r4, r5
 8002588:	10a4      	asrs	r4, r4, #2
 800258a:	2600      	movs	r6, #0
 800258c:	42a6      	cmp	r6, r4
 800258e:	d109      	bne.n	80025a4 <__libc_init_array+0x24>
 8002590:	4d0b      	ldr	r5, [pc, #44]	; (80025c0 <__libc_init_array+0x40>)
 8002592:	4c0c      	ldr	r4, [pc, #48]	; (80025c4 <__libc_init_array+0x44>)
 8002594:	f000 f820 	bl	80025d8 <_init>
 8002598:	1b64      	subs	r4, r4, r5
 800259a:	10a4      	asrs	r4, r4, #2
 800259c:	2600      	movs	r6, #0
 800259e:	42a6      	cmp	r6, r4
 80025a0:	d105      	bne.n	80025ae <__libc_init_array+0x2e>
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
 80025a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a8:	4798      	blx	r3
 80025aa:	3601      	adds	r6, #1
 80025ac:	e7ee      	b.n	800258c <__libc_init_array+0xc>
 80025ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b2:	4798      	blx	r3
 80025b4:	3601      	adds	r6, #1
 80025b6:	e7f2      	b.n	800259e <__libc_init_array+0x1e>
 80025b8:	08002634 	.word	0x08002634
 80025bc:	08002634 	.word	0x08002634
 80025c0:	08002634 	.word	0x08002634
 80025c4:	08002638 	.word	0x08002638

080025c8 <memset>:
 80025c8:	4402      	add	r2, r0
 80025ca:	4603      	mov	r3, r0
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d100      	bne.n	80025d2 <memset+0xa>
 80025d0:	4770      	bx	lr
 80025d2:	f803 1b01 	strb.w	r1, [r3], #1
 80025d6:	e7f9      	b.n	80025cc <memset+0x4>

080025d8 <_init>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	bf00      	nop
 80025dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025de:	bc08      	pop	{r3}
 80025e0:	469e      	mov	lr, r3
 80025e2:	4770      	bx	lr

080025e4 <_fini>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	bf00      	nop
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr
